{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# EduMind - Educational Platform with Wellness Integration\n\n## Overview\n\nEduMind is a modern educational platform that combines learning management with wellness tracking and gamification. The application features a space/orbital-themed interface designed to engage learners through interactive content, mood tracking, progress monitoring, and educational games. Built as a full-stack TypeScript application, it provides a comprehensive learning environment with integrated wellness features.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React + TypeScript**: Modern React application with TypeScript for type safety\n- **Component Library**: Radix UI primitives with shadcn/ui components for consistent design\n- **Styling**: Tailwind CSS with custom CSS variables and glass morphism design patterns\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack React Query for server state management\n- **Animations**: Framer Motion for smooth animations and transitions\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Express.js**: RESTful API server with TypeScript\n- **Database Integration**: Drizzle ORM configured for PostgreSQL with Neon Database\n- **Schema Validation**: Zod schemas shared between frontend and backend\n- **Session Management**: Express session handling with PostgreSQL storage\n- **Development**: Hot module replacement and error overlays for development experience\n\n### Database Design\n- **Users**: Core user profiles with leveling system (XP, levels)\n- **User Progress**: Subject-based progress tracking with completion percentages\n- **Mood Entries**: Wellness tracking with timestamped mood records\n- **Game Scores**: Gamification system tracking performance and XP rewards\n- **Schema Management**: Drizzle migrations with PostgreSQL-specific features\n\n### Data Storage Strategy\n- **Production**: PostgreSQL database via Neon Database serverless connection\n- **Development**: In-memory storage implementation for rapid prototyping\n- **Abstractions**: Storage interface pattern allowing seamless switching between storage backends\n\n### UI/UX Design Patterns\n- **Glass Morphism**: Semi-transparent cards with backdrop blur effects\n- **Space Theme**: Orbital interfaces, cosmic color schemes, and astronomical metaphors\n- **Component System**: Modular component library with consistent theming\n- **Responsive Design**: Mobile-first approach with adaptive layouts\n- **Accessibility**: Radix UI primitives ensure ARIA compliance and keyboard navigation\n\n### API Architecture\n- **RESTful Endpoints**: Standard HTTP methods for resource management\n- **Type Safety**: End-to-end TypeScript with shared schema definitions\n- **Error Handling**: Centralized error middleware with proper HTTP status codes\n- **Request Logging**: Development-friendly request/response logging\n\n### Build System\n- **Vite**: Fast development server with hot module replacement\n- **ESBuild**: Production build optimization for both client and server\n- **Path Aliases**: Simplified imports with @ prefixes for cleaner code organization\n- **Asset Handling**: Optimized static asset serving and bundling\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless**: Serverless PostgreSQL database connection\n- **drizzle-orm**: Type-safe SQL query builder and ORM\n- **@tanstack/react-query**: Server state management and caching\n- **framer-motion**: Animation library for smooth interactions\n- **@radix-ui/react-***: Headless UI component primitives\n- **react-hook-form**: Form state management and validation\n- **wouter**: Lightweight React router\n\n### Development Tools\n- **@replit/vite-plugin-***: Replit-specific development enhancements\n- **drizzle-kit**: Database schema management and migrations\n- **tsx**: TypeScript execution for development server\n\n### UI and Styling\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Dynamic class name generation\n- **clsx**: Conditional class name utility\n- **cmdk**: Command palette implementation\n\n### Utilities\n- **date-fns**: Date manipulation and formatting\n- **zod**: Runtime type validation and schema definition\n- **nanoid**: Unique ID generation\n- **connect-pg-simple**: PostgreSQL session store for Express","size_bytes":4366},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        glass: {\n          bg: \"var(--glass-bg)\",\n          border: \"var(--glass-border)\",\n        }\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"rotate\": \"rotate 30s linear infinite\",\n        \"counter-rotate\": \"counter-rotate 30s linear infinite\", \n        \"float\": \"float 3s ease-in-out infinite\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        \"rotate\": {\n          from: { transform: \"rotate(0deg)\" },\n          to: { transform: \"rotate(360deg)\" },\n        },\n        \"counter-rotate\": {\n          from: { transform: \"rotate(0deg)\" },\n          to: { transform: \"rotate(-360deg)\" },\n        },\n        \"float\": {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-10px)\" },\n        },\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3336},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"attached_assets/main_1758209791845.py":{"content":"from fastapi import FastAPI, Request, UploadFile, File, Form, HTTPException\r\nfrom fastapi.staticfiles import StaticFiles\r\nfrom fastapi.templating import Jinja2Templates\r\nfrom fastapi.responses import HTMLResponse, FileResponse, JSONResponse\r\nfrom pydantic import BaseModel\r\nfrom typing import List, Optional, Dict, Any\r\nimport json\r\nimport os\r\nimport re\r\nimport shutil\r\nimport subprocess\r\nimport signal\r\nfrom datetime import datetime\r\nimport random\r\nfrom typing import Optional\r\n\r\napp = FastAPI(title=\"Netflix Clone API\", version=\"1.0.0\")\r\n# Track running game processes by name\r\nrunning_games: Dict[str, int] = {}\r\n\r\n# Mount static files\r\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\r\n\"\"\"Serve built React static assets under /assets if present (ReactRecreation build).\"\"\"\r\ntry:\r\n    SPA_DIR_OVERRIDE = os.path.join(os.getcwd(), \"ReactRecreation\", \"ReactRecreation\", \"dist\", \"public\")\r\n    SPA_ASSETS = os.path.join(SPA_DIR_OVERRIDE, \"assets\")\r\n    if os.path.isdir(SPA_ASSETS):\r\n        app.mount(\"/assets\", StaticFiles(directory=SPA_ASSETS), name=\"spa_assets\")\r\nexcept Exception:\r\n    pass\r\n\r\n# Templates no longer used (legacy removed), but keep for safety if needed\r\ntemplates = Jinja2Templates(directory=\"templates\")\r\n\r\n# React build directory (uploaded project)\r\nSPA_DIR = os.path.join(os.getcwd(), \"ReactRecreation\", \"ReactRecreation\", \"dist\", \"public\")\r\nSPA_INDEX = os.path.join(SPA_DIR, \"index.html\")\r\nSPA_VITE_SVG = os.path.join(SPA_DIR, \"vite.svg\")\r\n\r\n# --------------------\r\n# Search API\r\n# --------------------\r\ndef normalize_text(text: str) -> str:\r\n    return (text or \"\").strip().lower()\r\n\r\ndef index_items_for_search():\r\n    items = []\r\n    # Movies\r\n    for m in movies_db:\r\n        items.append({\r\n            \"type\": \"movie\",\r\n            \"id\": m.get(\"id\"),\r\n            \"title\": m.get(\"title\"),\r\n            \"description\": m.get(\"description\"),\r\n            \"year\": m.get(\"year\"),\r\n            \"category\": m.get(\"category\")\r\n        })\r\n    # Videos and songs are represented in frontend_videos\r\n    for v in frontend_videos:\r\n        vdict = v.dict() if hasattr(v, \"dict\") else dict(v)\r\n        item_type = \"song\" if (vdict.get(\"category\") or \"\").lower() == \"audio\" else \"video\"\r\n        items.append({\r\n            \"type\": item_type,\r\n            \"id\": vdict.get(\"id\"),\r\n            \"title\": vdict.get(\"title\"),\r\n            \"description\": vdict.get(\"description\") or \"\",\r\n            \"category\": vdict.get(\"category\")\r\n        })\r\n    return items\r\n\r\ndef score_match(item: dict, q: str) -> int:\r\n    score = 0\r\n    title = normalize_text(item.get(\"title\", \"\"))\r\n    desc = normalize_text(item.get(\"description\", \"\"))\r\n    if q in title:\r\n        score += 10\r\n    if q in desc:\r\n        score += 5\r\n    return score\r\n\r\n@app.get(\"/api/search\")\r\nasync def search(query: Optional[str] = None, category: Optional[str] = None, limit: int = 20):\r\n    \"\"\"Unified search across movies, videos, and songs.\r\n    - query: text to search\r\n    - category: optional filter (movie|video|song|yoga|meditation etc.)\r\n    \"\"\"\r\n    q = normalize_text(query or \"\")\r\n    if not q:\r\n        return {\"results\": []}\r\n    items = index_items_for_search()\r\n    results = []\r\n    for it in items:\r\n        if category and normalize_text(category) not in [normalize_text(it.get(\"type\")), normalize_text(it.get(\"category\", \"\"))]:\r\n            continue\r\n        s = score_match(it, q)\r\n        if s > 0:\r\n            it_copy = dict(it)\r\n            it_copy[\"score\"] = s\r\n            results.append(it_copy)\r\n    results.sort(key=lambda x: x[\"score\"], reverse=True)\r\n    return {\"results\": results[:max(1, min(limit, 50))]}\r\n\r\n# Pydantic models\r\nclass Movie(BaseModel):\r\n    id: int\r\n    title: str\r\n    description: str\r\n    genre: str\r\n    year: int\r\n    rating: float\r\n    poster_url: str\r\n    backdrop_url: str\r\n    cast: List[str]\r\n    director: str\r\n    duration: str\r\n\r\nclass RecreationVideo(BaseModel):\r\n    id: int\r\n    title: str\r\n    description: str\r\n    category: str\r\n    duration: str\r\n    thumbnail: str\r\n    video_file: str\r\n    created_at: str\r\n    user_id: Optional[str] = None\r\n\r\nclass MovieCreate(BaseModel):\r\n    title: str\r\n    description: str\r\n    genre: str\r\n    year: int\r\n    rating: float\r\n    poster_url: str\r\n    backdrop_url: str\r\n    cast: List[str]\r\n    director: str\r\n    duration: str\r\n\r\n# Coin System Models\r\nclass User(BaseModel):\r\n    id: str\r\n    username: str\r\n    email: str\r\n    coins: int = 0\r\n    level: int = 1\r\n    experience: int = 0\r\n    streak_days: int = 0\r\n    last_activity: str\r\n    achievements: List[str] = []\r\n    created_at: str\r\n\r\nclass CoinTransaction(BaseModel):\r\n    id: str\r\n    user_id: str\r\n    amount: int\r\n    transaction_type: str  # \"earn\", \"spend\", \"bonus\"\r\n    source: str  # \"video\", \"song\", \"recreation\", \"daily\", \"achievement\"\r\n    source_id: Optional[str] = None\r\n    description: str\r\n    timestamp: str\r\n\r\nclass Reward(BaseModel):\r\n    id: str\r\n    name: str\r\n    description: str\r\n    cost: int\r\n    category: str  # \"premium_content\", \"customization\", \"physical\", \"digital\"\r\n    type: str  # \"video\", \"theme\", \"badge\", \"product\"\r\n    data: dict  # Additional data like video_id, theme_data, etc.\r\n    is_available: bool = True\r\n    created_at: str\r\n\r\nclass UserReward(BaseModel):\r\n    id: str\r\n    user_id: str\r\n    reward_id: str\r\n    redeemed_at: str\r\n    is_used: bool = False\r\n\r\n# In-memory database (replace with real database in production)\r\nmovies_db = []\r\nrecreation_videos_db = []\r\n\r\n# Simple video catalog for ReactRecreation frontend\r\nclass FrontendVideo(BaseModel):\r\n    id: str\r\n    title: str\r\n    description: Optional[str] = None\r\n    category: str\r\n    duration: str\r\n    poster_url: Optional[str] = None\r\n    video_url: Optional[str] = None\r\n    created_at: str\r\n\r\nfrontend_videos: List[FrontendVideo] = []\r\n\r\n# Coin System Database\r\nusers_db = []\r\ncoin_transactions_db = []\r\nrewards_db = []\r\nuser_rewards_db = []\r\n\r\n# Initialize default user\r\ndefault_user = {\r\n    \"id\": \"user_123\",\r\n    \"username\": \"WellnessUser\",\r\n    \"email\": \"user@wellness.com\",\r\n    \"coins\": 5,  # Starting coins\r\n    \"level\": 1,\r\n    \"experience\": 0,\r\n    \"streak_days\": 0,\r\n    \"last_activity\": datetime.now().isoformat(),\r\n    \"achievements\": [],\r\n    \"created_at\": datetime.now().isoformat()\r\n}\r\nusers_db.append(default_user)\r\n\r\n# Initialize rewards catalog\r\ndefault_rewards = [\r\n    {\r\n        \"id\": \"reward_001\",\r\n        \"name\": \"Premium Meditation Pack\",\r\n        \"description\": \"Unlock 5 exclusive guided meditation sessions\",\r\n        \"cost\": 10,  # 5 videos = 10 coins\r\n        \"category\": \"premium_content\",\r\n        \"type\": \"video\",\r\n        \"data\": {\"video_ids\": [\"premium_med_1\", \"premium_med_2\", \"premium_med_3\", \"premium_med_4\", \"premium_med_5\"]},\r\n        \"is_available\": True,\r\n        \"created_at\": datetime.now().isoformat()\r\n    },\r\n    {\r\n        \"id\": \"reward_002\",\r\n        \"name\": \"Dark Theme Unlock\",\r\n        \"description\": \"Unlock beautiful dark theme for the app\",\r\n        \"cost\": 6,  # 3 videos = 6 coins\r\n        \"category\": \"customization\",\r\n        \"type\": \"theme\",\r\n        \"data\": {\"theme_name\": \"dark_premium\", \"colors\": {\"primary\": \"#1a1a1a\", \"accent\": \"#e50914\"}},\r\n        \"is_available\": True,\r\n        \"created_at\": datetime.now().isoformat()\r\n    },\r\n    {\r\n        \"id\": \"reward_003\",\r\n        \"name\": \"Zen Master Badge\",\r\n        \"description\": \"Show off your meditation mastery with this exclusive badge\",\r\n        \"cost\": 15,  # 7-8 videos = 15 coins\r\n        \"category\": \"digital\",\r\n        \"type\": \"badge\",\r\n        \"data\": {\"badge_name\": \"zen_master\", \"icon\": \"🧘\", \"rarity\": \"rare\"},\r\n        \"is_available\": True,\r\n        \"created_at\": datetime.now().isoformat()\r\n    },\r\n    {\r\n        \"id\": \"reward_004\",\r\n        \"name\": \"Wellness Journal Download\",\r\n        \"description\": \"Download our premium wellness journal template\",\r\n        \"cost\": 8,  # 4 videos = 8 coins\r\n        \"category\": \"digital\",\r\n        \"type\": \"download\",\r\n        \"data\": {\"file_type\": \"pdf\", \"file_name\": \"wellness_journal.pdf\"},\r\n        \"is_available\": True,\r\n        \"created_at\": datetime.now().isoformat()\r\n    },\r\n    {\r\n        \"id\": \"reward_005\",\r\n        \"name\": \"Yoga Mat (Physical)\",\r\n        \"description\": \"Redeem for a premium yoga mat (shipping required)\",\r\n        \"cost\": 50,  # 25 videos = 50 coins\r\n        \"category\": \"physical\",\r\n        \"type\": \"product\",\r\n        \"data\": {\"product_name\": \"Premium Yoga Mat\", \"requires_shipping\": True},\r\n        \"is_available\": True,\r\n        \"created_at\": datetime.now().isoformat()\r\n    }\r\n]\r\nrewards_db.extend(default_rewards)\r\n\r\n# Create directories for recreation videos\r\nos.makedirs(\"static/recreation/videos\", exist_ok=True)\r\nos.makedirs(\"static/recreation/thumbnails\", exist_ok=True)\r\n\r\n# Sample movie data\r\nsample_movies = [\r\n    {\r\n        \"id\": 1,\r\n        \"title\": \"Stranger Things\",\r\n        \"description\": \"When a young boy vanishes, a small town uncovers a mystery involving secret experiments, terrifying supernatural forces, and one strange little girl.\",\r\n        \"genre\": \"Sci-Fi, Horror\",\r\n        \"year\": 2016,\r\n        \"rating\": 8.7,\r\n        \"poster_url\": \"https://image.tmdb.org/t/p/w500/49WJfeN0moxb9IPfGn8AIqMGskD.jpg\",\r\n        \"backdrop_url\": \"https://image.tmdb.org/t/p/w1280/56v2KjBlU4XaOv9rVYEQypROD7P.jpg\",\r\n        \"cast\": [\"Millie Bobby Brown\", \"Finn Wolfhard\", \"Gaten Matarazzo\"],\r\n        \"director\": \"The Duffer Brothers\",\r\n        \"duration\": \"50 min\",\r\n        \"category\": \"trending\"\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"title\": \"The Crown\",\r\n        \"description\": \"Follows the political rivalries and romance of Queen Elizabeth II's reign and the events that shaped the second half of the 20th century.\",\r\n        \"genre\": \"Drama, Biography\",\r\n        \"year\": 2016,\r\n        \"rating\": 8.6,\r\n        \"poster_url\": \"https://image.tmdb.org/t/p/w500/1M876Kj8Vfz7T8sSfGB0m4qFb61.jpg\",\r\n        \"backdrop_url\": \"https://image.tmdb.org/t/p/w1280/1M876Kj8Vfz7T8sSfGB0m4qFb61.jpg\",\r\n        \"cast\": [\"Claire Foy\", \"Matt Smith\", \"Tobias Menzies\"],\r\n        \"director\": \"Peter Morgan\",\r\n        \"duration\": \"60 min\",\r\n        \"category\": \"trending\"\r\n    },\r\n    {\r\n        \"id\": 3,\r\n        \"title\": \"Money Heist\",\r\n        \"description\": \"An unusual group of robbers attempt to carry out the most perfect robbery in Spanish history - stealing 2.4 billion euros from the Royal Mint of Spain.\",\r\n        \"genre\": \"Crime, Thriller\",\r\n        \"year\": 2017,\r\n        \"rating\": 8.3,\r\n        \"poster_url\": \"https://image.tmdb.org/t/p/w500/reEMJA1uzscCbkpeRJeTT2bjqUp.jpg\",\r\n        \"backdrop_url\": \"https://image.tmdb.org/t/p/w1280/reEMJA1uzscCbkpeRJeTT2bjqUp.jpg\",\r\n        \"cast\": [\"Úrsula Corberó\", \"Álvaro Morte\", \"Itziar Ituño\"],\r\n        \"director\": \"Álex Pina\",\r\n        \"duration\": \"70 min\",\r\n        \"category\": \"trending\"\r\n    },\r\n    {\r\n        \"id\": 4,\r\n        \"title\": \"The Witcher\",\r\n        \"description\": \"Geralt of Rivia, a solitary monster hunter, struggles to find his place in a world where people often prove more wicked than beasts.\",\r\n        \"genre\": \"Fantasy, Action\",\r\n        \"year\": 2019,\r\n        \"rating\": 8.2,\r\n        \"poster_url\": \"https://image.tmdb.org/t/p/w500/7vjaCdMw15FEbXyLQTVa04URsPm.jpg\",\r\n        \"backdrop_url\": \"https://image.tmdb.org/t/p/w1280/7vjaCdMw15FEbXyLQTVa04URsPm.jpg\",\r\n        \"cast\": [\"Henry Cavill\", \"Anya Chalotra\", \"Freya Allan\"],\r\n        \"director\": \"Lauren Schmidt Hissrich\",\r\n        \"duration\": \"60 min\",\r\n        \"category\": \"action\"\r\n    },\r\n    {\r\n        \"id\": 5,\r\n        \"title\": \"Ozark\",\r\n        \"description\": \"A financial advisor drags his family from Chicago to the Missouri Ozarks, where he must launder money to appease a Mexican cartel.\",\r\n        \"genre\": \"Crime, Drama\",\r\n        \"year\": 2017,\r\n        \"rating\": 8.1,\r\n        \"poster_url\": \"https://image.tmdb.org/t/p/w500/miqV0Lc8oH6g4v0Y4R3qZ1uYtI8.jpg\",\r\n        \"backdrop_url\": \"https://image.tmdb.org/t/p/w1280/miqV0Lc8oH6g4v0Y4R3qZ1uYtI8.jpg\",\r\n        \"cast\": [\"Jason Bateman\", \"Laura Linney\", \"Julia Garner\"],\r\n        \"director\": \"Bill Dubuque\",\r\n        \"duration\": \"60 min\",\r\n        \"category\": \"drama\"\r\n    },\r\n    {\r\n        \"id\": 6,\r\n        \"title\": \"Dark\",\r\n        \"description\": \"A family saga with a supernatural twist, set in a German town, where the disappearance of two young children exposes the relationships among four families.\",\r\n        \"genre\": \"Sci-Fi, Thriller\",\r\n        \"year\": 2017,\r\n        \"rating\": 8.7,\r\n        \"poster_url\": \"https://image.tmdb.org/t/p/w500/5Vz8VhJ8VhJ8VhJ8VhJ8VhJ8VhJ8.jpg\",\r\n        \"backdrop_url\": \"https://image.tmdb.org/t/p/w1280/5Vz8VhJ8VhJ8VhJ8VhJ8VhJ8VhJ8.jpg\",\r\n        \"cast\": [\"Louis Hofmann\", \"Karoline Eichhorn\", \"Lisa Vicari\"],\r\n        \"director\": \"Baran bo Odar\",\r\n        \"duration\": \"50 min\",\r\n        \"category\": \"sci-fi\"\r\n    }\r\n]\r\n\r\n# Initialize database with sample data\r\nmovies_db = sample_movies.copy()\r\n\r\n# Seed simple frontend videos list from sample movies so React UI has data\r\nif not frontend_videos:\r\n    for m in movies_db:\r\n        frontend_videos.append(FrontendVideo(\r\n            id=str(m[\"id\"]),\r\n            title=m[\"title\"],\r\n            description=m[\"description\"],\r\n            category=(m.get(\"category\") or \"General\").title(),\r\n            duration=m.get(\"duration\") or \"\",\r\n            poster_url=m.get(\"poster_url\"),\r\n            video_url=None,\r\n            created_at=datetime.now().isoformat()\r\n        ))\r\n    \r\n    # Add some audio content for the React app\r\n    frontend_videos.extend([\r\n        FrontendVideo(\r\n            id=\"audio_1\",\r\n            title=\"Healing Meditation\",\r\n            description=\"Relaxing sounds for meditation and stress relief.\",\r\n            category=\"Audio\",\r\n            duration=\"5:00\",\r\n            poster_url=\"/static/images/song_thumbnails/healing_meditation_thumb.jpg\",\r\n            video_url=\"/static/songs/432hz-healing-meditation-396482.mp3\",\r\n            created_at=datetime.now().isoformat()\r\n        ),\r\n        FrontendVideo(\r\n            id=\"audio_2\",\r\n            title=\"Nature Sounds\",\r\n            description=\"Soothing nature sounds for sleep and relaxation.\",\r\n            category=\"Audio\",\r\n            duration=\"10:00\",\r\n            poster_url=\"/static/images/song_thumbnails/nature_meditation_thumb.jpg\",\r\n            video_url=\"/static/songs/nature-sounds-slow-meditation-healing-frequency-432hz-368787.mp3\",\r\n            created_at=datetime.now().isoformat()\r\n        ),\r\n        FrontendVideo(\r\n            id=\"audio_3\",\r\n            title=\"Alpha Music\",\r\n            description=\"432Hz frequency music for deep focus and meditation.\",\r\n            category=\"Audio\",\r\n            duration=\"8:00\",\r\n            poster_url=\"/static/images/song_thumbnails/alpha_music_thumb.jpg\",\r\n            video_url=\"/static/songs/alpha-music-432hz-the-first-314853.mp3\",\r\n            created_at=datetime.now().isoformat()\r\n        )\r\n    ])\r\n\r\n# Auto-index local media from static/videos and static/songs\r\ndef _safe_title_from_filename(filename: str) -> str:\r\n    base = os.path.splitext(os.path.basename(filename))[0]\r\n    # Replace separators with spaces and normalize\r\n    return re.sub(r\"[_-]+\", \" \", base).strip().title()\r\n\r\ndef index_static_media():\r\n    try:\r\n        existing_ids = {v.id for v in frontend_videos}\r\n\r\n        # Videos\r\n        videos_dir = os.path.join(\"static\", \"videos\")\r\n        if os.path.isdir(videos_dir):\r\n            for name in os.listdir(videos_dir):\r\n                if not any(name.lower().endswith(ext) for ext in [\".mp4\", \".webm\", \".mov\", \".mkv\"]):\r\n                    continue\r\n                vid_id = f\"vid_{name}\"\r\n                if vid_id in existing_ids:\r\n                    continue\r\n                poster = None\r\n                # Try to find a matching thumbnail in static/images/thumbnails\r\n                thumb_dir = os.path.join(\"static\", \"images\", \"thumbnails\")\r\n                base = os.path.splitext(name)[0]\r\n                possible_thumbs = [\r\n                    f\"{base}_thumb.jpg\",\r\n                    f\"{base}.jpg\",\r\n                    f\"{base}.png\",\r\n                ]\r\n                for t in possible_thumbs:\r\n                    candidate = os.path.join(thumb_dir, t)\r\n                    if os.path.isfile(candidate):\r\n                        poster = f\"/static/images/thumbnails/{t}\"\r\n                        break\r\n                frontend_videos.append(FrontendVideo(\r\n                    id=vid_id,\r\n                    title=_safe_title_from_filename(name),\r\n                    description=None,\r\n                    category=\"Videos\",\r\n                    duration=\"\",\r\n                    poster_url=poster,\r\n                    video_url=f\"/static/videos/{name}\",\r\n                    created_at=datetime.now().isoformat()\r\n                ))\r\n                existing_ids.add(vid_id)\r\n\r\n        # Songs (as Audio category)\r\n        songs_dir = os.path.join(\"static\", \"songs\")\r\n        default_song_thumb = \"/static/images/song_thumbnails/meditation_thumb.jpg\"\r\n        if os.path.isdir(songs_dir):\r\n            for name in os.listdir(songs_dir):\r\n                if not any(name.lower().endswith(ext) for ext in [\".mp3\", \".wav\", \".aac\", \".ogg\", \".m4a\"]):\r\n                    continue\r\n                song_id = f\"audio_{name}\"\r\n                if song_id in existing_ids:\r\n                    continue\r\n                # Try to map thumbnails by simple heuristics\r\n                poster = default_song_thumb\r\n                lower = name.lower()\r\n                thumb_map = [\r\n                    (\"alpha\", \"/static/images/song_thumbnails/alpha_music_thumb.jpg\"),\r\n                    (\"nature\", \"/static/images/song_thumbnails/nature_meditation_thumb.jpg\"),\r\n                    (\"comfort\", \"/static/images/song_thumbnails/comfort_sounds_thumb.jpg\"),\r\n                    (\"healing\", \"/static/images/song_thumbnails/healing_meditation_thumb.jpg\"),\r\n                ]\r\n                for key, url in thumb_map:\r\n                    if key in lower:\r\n                        poster = url\r\n                        break\r\n                frontend_videos.append(FrontendVideo(\r\n                    id=song_id,\r\n                    title=_safe_title_from_filename(name),\r\n                    description=None,\r\n                    category=\"Audio\",\r\n                    duration=\"\",\r\n                    poster_url=poster,\r\n                    video_url=f\"/static/songs/{name}\",\r\n                    created_at=datetime.now().isoformat()\r\n                ))\r\n                existing_ids.add(song_id)\r\n    except Exception:\r\n        # Non-fatal: keep app running even if indexing fails\r\n        pass\r\n\r\n# Perform indexing at startup\r\nindex_static_media()\r\n\r\n# Routes\r\n@app.get(\"/\", response_class=HTMLResponse)\r\nasync def read_root(request: Request):\r\n    # Serve ReactRecreation SPA\r\n    if os.path.exists(SPA_INDEX):\r\n        return FileResponse(SPA_INDEX)\r\n    return HTMLResponse(\"<h3>React build not found. Please build the app in ReactRecreation/ReactRecreation.</h3>\")\r\n\r\n@app.get(\"/api/movies\", response_model=List[Movie])\r\nasync def get_movies(category: Optional[str] = None):\r\n    if category:\r\n        return [movie for movie in movies_db if movie[\"category\"] == category]\r\n    return movies_db\r\n\r\n@app.get(\"/api/movies/{movie_id}\", response_model=Movie)\r\nasync def get_movie(movie_id: int):\r\n    for movie in movies_db:\r\n        if movie[\"id\"] == movie_id:\r\n            return movie\r\n    return {\"error\": \"Movie not found\"}\r\n\r\n@app.post(\"/api/movies\", response_model=Movie)\r\nasync def create_movie(movie: MovieCreate):\r\n    new_id = max([m[\"id\"] for m in movies_db], default=0) + 1\r\n    new_movie = {\r\n        \"id\": new_id,\r\n        **movie.dict()\r\n    }\r\n    movies_db.append(new_movie)\r\n    return new_movie\r\n\r\n@app.put(\"/api/movies/{movie_id}\", response_model=Movie)\r\nasync def update_movie(movie_id: int, movie: MovieCreate):\r\n    for i, existing_movie in enumerate(movies_db):\r\n        if existing_movie[\"id\"] == movie_id:\r\n            movies_db[i] = {\"id\": movie_id, **movie.dict()}\r\n            return movies_db[i]\r\n    return {\"error\": \"Movie not found\"}\r\n\r\n@app.delete(\"/api/movies/{movie_id}\")\r\nasync def delete_movie(movie_id: int):\r\n    for i, movie in enumerate(movies_db):\r\n        if movie[\"id\"] == movie_id:\r\n            deleted_movie = movies_db.pop(i)\r\n            return {\"message\": f\"Movie '{deleted_movie['title']}' deleted successfully\"}\r\n    return {\"error\": \"Movie not found\"}\r\n\r\n@app.get(\"/api/categories\")\r\nasync def get_categories():\r\n    categories = list(set([movie[\"category\"] for movie in movies_db]))\r\n    return {\"categories\": categories}\r\n\r\n# ---------- Minimal endpoints expected by ReactRecreation ----------\r\n@app.get(\"/api/videos\")\r\nasync def api_videos_all():\r\n    return [v.dict() for v in frontend_videos]\r\n\r\n@app.get(\"/api/videos/category\")\r\nasync def api_videos_by_category(q: Optional[str] = None):\r\n    # React uses queryKey ['/api/videos/category', 'Audio'] - mimic by reading query param `q`\r\n    # If q not provided, return empty for safety\r\n    if not q:\r\n        return []\r\n    return [v.dict() for v in frontend_videos if (v.category or '').lower() == (q or '').lower()]\r\n\r\n@app.get(\"/api/videos/category/{category}\")\r\nasync def api_videos_by_category_path(category: str):\r\n    cat = (category or '').lower()\r\n    return [v.dict() for v in frontend_videos if (v.category or '').lower() == cat]\r\n\r\n# ---------- Recreation content API (used by React Recreation page) ----------\r\n# Storage directory for recorded/uploaded short videos\r\nRECREATION_DIR = os.path.join(\"static\", \"recreation\", \"videos\")\r\nos.makedirs(RECREATION_DIR, exist_ok=True)\r\n\r\ndef _list_recreation_videos() -> List[Dict[str, Any]]:\r\n    items: List[Dict[str, Any]] = []\r\n    if not os.path.isdir(RECREATION_DIR):\r\n        return items\r\n\r\n    for name in os.listdir(RECREATION_DIR):\r\n        file_path = os.path.join(RECREATION_DIR, name)\r\n        if not os.path.isfile(file_path):\r\n            continue\r\n        if not any(name.lower().endswith(ext) for ext in [\".webm\", \".mp4\", \".mov\", \".mkv\"]):\r\n            continue\r\n        stat = os.stat(file_path)\r\n        items.append({\r\n            \"id\": name,\r\n            \"title\": os.path.splitext(name)[0],\r\n            \"url\": f\"/static/recreation/videos/{name}\",\r\n            \"size_bytes\": stat.st_size,\r\n            \"created_at\": datetime.fromtimestamp(max(stat.st_ctime, stat.st_mtime)).isoformat(),\r\n        })\r\n    # Newest first\r\n    items.sort(key=lambda x: x[\"created_at\"], reverse=True)\r\n    return items\r\n\r\n@app.get(\"/api/recreation/videos\")\r\nasync def api_recreation_list_videos():\r\n    \"\"\"List uploaded/recorded recreation videos. Returns [] if none.\"\"\"\r\n    return _list_recreation_videos()\r\n\r\n@app.post(\"/api/recreation/upload\")\r\nasync def api_recreation_upload_video(file: UploadFile = File(...)):\r\n    \"\"\"Upload a short video (multipart/form-data). Returns the saved item.\"\"\"\r\n    try:\r\n        print(f\"Upload attempt: filename={file.filename}, content_type={file.content_type}\")\r\n        \r\n        # Ensure directory exists\r\n        os.makedirs(RECREATION_DIR, exist_ok=True)\r\n        \r\n        ext = os.path.splitext(file.filename or \"\")[1] or \".webm\"\r\n        if ext.lower() not in [\".webm\", \".mp4\", \".mov\", \".mkv\"]:\r\n            ext = \".webm\"\r\n        ts = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\r\n        safe_name = re.sub(r\"[^a-zA-Z0-9_-]\", \"_\", os.path.splitext(file.filename or \"recording\")[0])\r\n        filename = f\"{ts}_{safe_name}{ext}\"\r\n        dest_path = os.path.join(RECREATION_DIR, filename)\r\n        \r\n        print(f\"Saving to: {dest_path}\")\r\n        \r\n        # Read file content and save\r\n        content = await file.read()\r\n        with open(dest_path, \"wb\") as out:\r\n            out.write(content)\r\n        \r\n        file_size = os.path.getsize(dest_path)\r\n        print(f\"File saved successfully: {file_size} bytes\")\r\n        \r\n        item = {\r\n            \"id\": filename,\r\n            \"title\": os.path.splitext(filename)[0],\r\n            \"url\": f\"/static/recreation/videos/{filename}\",\r\n            \"size_bytes\": file_size,\r\n            \"created_at\": datetime.now().isoformat(),\r\n        }\r\n        return item\r\n    except Exception as e:\r\n        print(f\"Upload error: {e}\")\r\n        raise HTTPException(status_code=500, detail=f\"Upload failed: {e}\")\r\n\r\n@app.post(\"/api/recreation/videos\")\r\nasync def api_recreation_upload_video_alt(file: UploadFile = File(...)):\r\n    \"\"\"Alternative upload endpoint for compatibility.\"\"\"\r\n    return await api_recreation_upload_video(file)\r\n\r\n@app.delete(\"/api/recreation/videos/{video_id}\")\r\nasync def api_recreation_delete_video(video_id: str):\r\n    \"\"\"Delete a recreation video by filename id.\"\"\"\r\n    try:\r\n        target = os.path.join(RECREATION_DIR, video_id)\r\n        if not os.path.isfile(target):\r\n            raise HTTPException(status_code=404, detail=\"Video not found\")\r\n        os.remove(target)\r\n        return {\"deleted\": True, \"id\": video_id}\r\n    except HTTPException:\r\n        raise\r\n    except Exception as e:\r\n        raise HTTPException(status_code=500, detail=f\"Delete failed: {e}\")\r\n\r\n# Recreation endpoints\r\n@app.get(\"/recreation\", response_class=HTMLResponse)\r\nasync def recreation_page(request: Request):\r\n    if os.path.exists(SPA_INDEX):\r\n        return FileResponse(SPA_INDEX)\r\n    return HTMLResponse(\"<h3>React build not found. Please build the app in ReactRecreation/ReactRecreation.</h3>\")\r\n\r\n\r\n@app.get(\"/api/recreation/videos\", response_model=List[RecreationVideo])\r\nasync def get_recreation_videos(category: Optional[str] = None):\r\n    if category:\r\n        return [video for video in recreation_videos_db if video[\"category\"] == category]\r\n    return recreation_videos_db\r\n\r\n@app.post(\"/api/recreation/upload\")\r\nasync def upload_recreation_video(\r\n    file: UploadFile = File(...),\r\n    title: str = Form(...),\r\n    description: str = Form(...),\r\n    category: str = Form(...)\r\n):\r\n    try:\r\n        # Generate unique filename\r\n        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\r\n        filename = f\"{timestamp}_{file.filename}\"\r\n        file_path = f\"static/recreation/videos/{filename}\"\r\n        \r\n        # Save video file\r\n        with open(file_path, \"wb\") as buffer:\r\n            shutil.copyfileobj(file.file, buffer)\r\n        \r\n        # Generate thumbnail (placeholder for now)\r\n        thumbnail_filename = f\"thumb_{timestamp}.jpg\"\r\n        thumbnail_path = f\"static/recreation/thumbnails/{thumbnail_filename}\"\r\n        \r\n        # Create a simple placeholder thumbnail\r\n        with open(thumbnail_path, \"wb\") as f:\r\n            f.write(b\"\")  # Placeholder - in real app, generate actual thumbnail\r\n        \r\n        # Create video record\r\n        new_id = max([v[\"id\"] for v in recreation_videos_db], default=0) + 1\r\n        video_record = {\r\n            \"id\": new_id,\r\n            \"title\": title,\r\n            \"description\": description,\r\n            \"category\": category,\r\n            \"duration\": \"0:00\",  # Will be updated when video is processed\r\n            \"thumbnail\": thumbnail_filename,\r\n            \"video_file\": filename,\r\n            \"created_at\": datetime.now().isoformat(),\r\n            \"user_id\": \"user_123\"  # In real app, get from session/auth\r\n        }\r\n        \r\n        recreation_videos_db.append(video_record)\r\n        \r\n        return {\r\n            \"message\": \"Video uploaded successfully\",\r\n            \"video\": video_record\r\n        }\r\n        \r\n    except Exception as e:\r\n        raise HTTPException(status_code=500, detail=f\"Upload failed: {str(e)}\")\r\n\r\n@app.delete(\"/api/recreation/videos/{video_id}\")\r\nasync def delete_recreation_video(video_id: int):\r\n    for i, video in enumerate(recreation_videos_db):\r\n        if video[\"id\"] == video_id:\r\n            deleted_video = recreation_videos_db.pop(i)\r\n            \r\n            # Delete files\r\n            try:\r\n                os.remove(f\"static/recreation/videos/{deleted_video['video_file']}\")\r\n                os.remove(f\"static/recreation/thumbnails/{deleted_video['thumbnail']}\")\r\n            except:\r\n                pass  # Files might not exist\r\n            \r\n            return {\"message\": f\"Video '{deleted_video['title']}' deleted successfully\"}\r\n    return {\"error\": \"Video not found\"}\r\n\r\n# ==================== COIN SYSTEM FUNCTIONS ====================\r\n\r\ndef get_user(user_id: str):\r\n    \"\"\"Get user by ID\"\"\"\r\n    for user in users_db:\r\n        if user[\"id\"] == user_id:\r\n            return user\r\n    return None\r\n\r\ndef add_coins(user_id: str, amount: int, source: str, source_id: str = None, description: str = \"\"):\r\n    \"\"\"Add coins to user account and create transaction record\"\"\"\r\n    user = get_user(user_id)\r\n    if not user:\r\n        return False\r\n    \r\n    # Add coins\r\n    user[\"coins\"] += amount\r\n    \r\n    # Add experience (1 XP per coin)\r\n    user[\"experience\"] += amount\r\n    \r\n    # Check for level up (every 20 XP = 1 level)\r\n    new_level = (user[\"experience\"] // 20) + 1\r\n    if new_level > user[\"level\"]:\r\n        user[\"level\"] = new_level\r\n        # Bonus coins for leveling up\r\n        bonus_coins = new_level * 2\r\n        user[\"coins\"] += bonus_coins\r\n        amount += bonus_coins\r\n    \r\n    # Update last activity\r\n    user[\"last_activity\"] = datetime.now().isoformat()\r\n    \r\n    # Create transaction record\r\n    transaction = {\r\n        \"id\": f\"txn_{len(coin_transactions_db) + 1}\",\r\n        \"user_id\": user_id,\r\n        \"amount\": amount,\r\n        \"transaction_type\": \"earn\",\r\n        \"source\": source,\r\n        \"source_id\": source_id,\r\n        \"description\": description,\r\n        \"timestamp\": datetime.now().isoformat()\r\n    }\r\n    coin_transactions_db.append(transaction)\r\n    \r\n    return True\r\n\r\ndef spend_coins(user_id: str, amount: int, source: str, source_id: str = None, description: str = \"\"):\r\n    \"\"\"Spend coins from user account and create transaction record\"\"\"\r\n    user = get_user(user_id)\r\n    if not user or user[\"coins\"] < amount:\r\n        return False\r\n    \r\n    # Deduct coins\r\n    user[\"coins\"] -= amount\r\n    \r\n    # Create transaction record\r\n    transaction = {\r\n        \"id\": f\"txn_{len(coin_transactions_db) + 1}\",\r\n        \"user_id\": user_id,\r\n        \"amount\": -amount,\r\n        \"transaction_type\": \"spend\",\r\n        \"source\": source,\r\n        \"source_id\": source_id,\r\n        \"description\": description,\r\n        \"timestamp\": datetime.now().isoformat()\r\n    }\r\n    coin_transactions_db.append(transaction)\r\n    \r\n    return True\r\n\r\ndef calculate_video_coins(duration_minutes: int, category: str) -> int:\r\n    \"\"\"Calculate coins earned for watching a video - 2 coins for full video\"\"\"\r\n    # Fixed 2 coins for watching full video without skipping\r\n    return 2\r\n\r\ndef calculate_song_coins(duration_minutes: int) -> int:\r\n    \"\"\"Calculate coins earned for listening to a song - 3 coins per song\"\"\"\r\n    # Fixed 3 coins for listening to a song\r\n    return 3\r\n\r\ndef calculate_recreation_coins(duration_minutes: int) -> int:\r\n    \"\"\"Calculate coins earned for creating recreation content - 3 coins per recreation\"\"\"\r\n    # Fixed 3 coins for creating recreation content\r\n    return 3\r\n\r\n# ==================== COIN SYSTEM API ENDPOINTS ====================\r\n\r\n@app.get(\"/api/user/{user_id}\")\r\nasync def get_user_profile(user_id: str):\r\n    \"\"\"Get user profile with coin balance and stats\"\"\"\r\n    user = get_user(user_id)\r\n    if not user:\r\n        raise HTTPException(status_code=404, detail=\"User not found\")\r\n    return user\r\n\r\n# SPA fallback for client-side routes (excluding API and static paths)\r\n@app.get(\"/{full_path:path}\")\r\nasync def spa_fallback(full_path: str):\r\n    # Allow API and static to pass through 404 normally\r\n    if full_path.startswith(\"api/\") or full_path.startswith(\"static/\") or full_path.startswith(\"Games/\"):\r\n        return JSONResponse({\"detail\": \"Not Found\"}, status_code=404)\r\n    # Only serve SPA for known frontend routes; avoid masking API 404s\r\n    if os.path.exists(SPA_INDEX):\r\n        return FileResponse(SPA_INDEX)\r\n    return JSONResponse({\"detail\": \"SPA not built\"}, status_code=404)\r\n\r\n\r\n\r\n# SPA fallback for client-side routes (excluding API and static paths)\r\n\r\n@app.get(\"/api/user/{user_id}/transactions\")\r\nasync def get_user_transactions(user_id: str, limit: int = 50):\r\n    \"\"\"Get user's coin transaction history\"\"\"\r\n    user_transactions = [tx for tx in coin_transactions_db if tx[\"user_id\"] == user_id]\r\n    return sorted(user_transactions, key=lambda x: x[\"timestamp\"], reverse=True)[:limit]\r\n\r\n@app.post(\"/api/user/{user_id}/earn-coins\")\r\nasync def earn_coins_endpoint(\r\n    user_id: str,\r\n    source: str = Form(...),\r\n    source_id: str = Form(None),\r\n    duration_minutes: int = Form(0),\r\n    category: str = Form(\"general\")\r\n):\r\n    \"\"\"Earn coins for various activities\"\"\"\r\n    user = get_user(user_id)\r\n    if not user:\r\n        raise HTTPException(status_code=404, detail=\"User not found\")\r\n    \r\n    # Calculate coins based on source\r\n    if source == \"video\":\r\n        amount = calculate_video_coins(duration_minutes, category)\r\n    elif source == \"song\":\r\n        amount = calculate_song_coins(duration_minutes)\r\n    elif source == \"recreation\":\r\n        amount = calculate_recreation_coins(duration_minutes)\r\n    elif source == \"game\":\r\n        # For games, the frontend passes the awarded amount (validated server-side\r\n        # by the game launcher + result polling). Trust small integer here.\r\n        try:\r\n            amount = int(duration_minutes)\r\n        except Exception:\r\n            amount = 0\r\n        if amount < 0:\r\n            amount = 0\r\n        if amount > 5:\r\n            amount = 5\r\n    elif source == \"daily\":\r\n        amount = 10  # Daily login bonus\r\n    else:\r\n        amount = 5  # Default amount\r\n    \r\n    # Add coins\r\n    success = add_coins(user_id, amount, source, source_id, f\"Earned {amount} coins from {source}\")\r\n    \r\n    if success:\r\n        return {\"message\": f\"Earned {amount} coins!\", \"coins_earned\": amount, \"new_balance\": user[\"coins\"]}\r\n    else:\r\n        raise HTTPException(status_code=500, detail=\"Failed to add coins\")\r\n\r\n@app.get(\"/api/rewards\")\r\nasync def get_rewards(category: Optional[str] = None):\r\n    \"\"\"Get available rewards\"\"\"\r\n    if category:\r\n        return [reward for reward in rewards_db if reward[\"category\"] == category and reward[\"is_available\"]]\r\n    return [reward for reward in rewards_db if reward[\"is_available\"]]\r\n\r\n@app.post(\"/api/user/{user_id}/redeem-reward/{reward_id}\")\r\nasync def redeem_reward(user_id: str, reward_id: str):\r\n    \"\"\"Redeem a reward using coins\"\"\"\r\n    user = get_user(user_id)\r\n    if not user:\r\n        raise HTTPException(status_code=404, detail=\"User not found\")\r\n    \r\n    # Find reward\r\n    reward = None\r\n    for r in rewards_db:\r\n        if r[\"id\"] == reward_id and r[\"is_available\"]:\r\n            reward = r\r\n            break\r\n\r\n    if not reward:\r\n        raise HTTPException(status_code=404, detail=\"Reward not found\")\r\n    \r\n    if user[\"coins\"] < reward[\"cost\"]:\r\n        raise HTTPException(status_code=400, detail=\"Insufficient coins\")\r\n    \r\n    # Spend coins\r\n    if not spend_coins(user_id, reward[\"cost\"], \"reward\", reward_id, f\"Redeemed {reward['name']}\"):\r\n        raise HTTPException(status_code=500, detail=\"Failed to process redemption\")\r\n    \r\n    # Create user reward record\r\n    user_reward = {\r\n        \"id\": f\"user_reward_{len(user_rewards_db) + 1}\",\r\n        \"user_id\": user_id,\r\n        \"reward_id\": reward_id,\r\n        \"redeemed_at\": datetime.now().isoformat(),\r\n        \"is_used\": False\r\n    }\r\n    user_rewards_db.append(user_reward)\r\n    \r\n    return {\r\n        \"message\": f\"Successfully redeemed {reward['name']}!\",\r\n        \"reward\": reward,\r\n        \"new_balance\": user[\"coins\"]\r\n    }\r\n\r\n@app.get(\"/api/user/{user_id}/rewards\")\r\nasync def get_user_rewards(user_id: str):\r\n    \"\"\"Get user's redeemed rewards\"\"\"\r\n    user_rewards = [ur for ur in user_rewards_db if ur[\"user_id\"] == user_id]\r\n    \r\n    # Add reward details\r\n    result = []\r\n    for ur in user_rewards:\r\n        reward = next((r for r in rewards_db if r[\"id\"] == ur[\"reward_id\"]), None)\r\n        if reward:\r\n            result.append({\r\n                **ur,\r\n                \"reward_details\": reward\r\n            })\r\n    \r\n    return result\r\n\r\n@app.get(\"/api/user/{user_id}/achievements\")\r\nasync def get_user_achievements(user_id: str):\r\n    \"\"\"Get user's achievements and progress\"\"\"\r\n    user = get_user(user_id)\r\n    if not user:\r\n        raise HTTPException(status_code=404, detail=\"User not found\")\r\n    \r\n    # Calculate achievements based on user stats\r\n    achievements = []\r\n    \r\n    # Video watching achievements\r\n    video_transactions = [tx for tx in coin_transactions_db if tx[\"user_id\"] == user_id and tx[\"source\"] == \"video\"]\r\n    videos_watched = len(video_transactions)\r\n    \r\n    if videos_watched >= 5:\r\n        achievements.append({\"id\": \"video_master\", \"name\": \"Video Master\", \"description\": \"Watched 5+ videos\", \"unlocked\": True})\r\n    elif videos_watched >= 3:\r\n        achievements.append({\"id\": \"video_master\", \"name\": \"Video Master\", \"description\": \"Watched 5+ videos\", \"unlocked\": False, \"progress\": f\"{videos_watched}/5\"})\r\n    \r\n    # Streak achievements\r\n    if user[\"streak_days\"] >= 7:\r\n        achievements.append({\"id\": \"week_warrior\", \"name\": \"Week Warrior\", \"description\": \"7-day streak\", \"unlocked\": True})\r\n    elif user[\"streak_days\"] >= 3:\r\n        achievements.append({\"id\": \"week_warrior\", \"name\": \"Week Warrior\", \"description\": \"7-day streak\", \"unlocked\": False, \"progress\": f\"{user['streak_days']}/7\"})\r\n    \r\n    # Level achievements\r\n    if user[\"level\"] >= 3:\r\n        achievements.append({\"id\": \"level_master\", \"name\": \"Level Master\", \"description\": \"Reached level 3\", \"unlocked\": True})\r\n    elif user[\"level\"] >= 2:\r\n        achievements.append({\"id\": \"level_master\", \"name\": \"Level Master\", \"description\": \"Reached level 3\", \"unlocked\": False, \"progress\": f\"{user['level']}/3\"})\r\n    \r\n    return {\r\n        \"achievements\": achievements,\r\n        \"total_achievements\": len([a for a in achievements if a[\"unlocked\"]]),\r\n        \"user_level\": user[\"level\"],\r\n        \"user_experience\": user[\"experience\"],\r\n        \"next_level_xp\": (user[\"level\"] * 20) - user[\"experience\"]\r\n    }\r\n\r\n# Game-related endpoints\r\n@app.post(\"/api/launch-game/{game_name}\")\r\nasync def launch_game(game_name: str):\r\n    \"\"\"Launch a Pygame application\"\"\"\r\n    try:\r\n        games_dir = os.path.join(os.getcwd(), \"Games\")\r\n        \r\n        # Map game names to their launcher scripts\r\n        game_launchers = {\r\n            \"dino\": \"launch_dino_game.py\",\r\n            \"2048\": \"launch_2048_game.py\",\r\n            \"tetris\": \"launch_tetris_game.py\",\r\n            \"snake\": \"launch_snake_game.py\"\r\n        }\r\n        \r\n        if game_name not in game_launchers:\r\n            raise HTTPException(status_code=404, detail=\"Game not found\")\r\n        \r\n        launcher_path = os.path.join(games_dir, game_launchers[game_name])\r\n        \r\n        if not os.path.exists(launcher_path):\r\n            raise HTTPException(status_code=404, detail=\"Game launcher not found\")\r\n        \r\n        # Reset game result so polling doesn't read stale results\r\n        try:\r\n            result_file = os.path.join(games_dir, \"game_result.json\")\r\n            with open(result_file, 'w') as f:\r\n                json.dump({\r\n                    \"game\": game_name,\r\n                    \"completed\": False,\r\n                    \"coins_earned\": 0,\r\n                    \"score\": 0,\r\n                    \"timestamp\": datetime.now().isoformat()\r\n                }, f)\r\n        except Exception:\r\n            pass\r\n\r\n        # Start the game in a subprocess\r\n        process = subprocess.Popen(\r\n            [\"python\", launcher_path],\r\n            cwd=games_dir,\r\n            stdout=subprocess.PIPE,\r\n            stderr=subprocess.PIPE\r\n        )\r\n        # remember pid\r\n        try:\r\n            running_games[game_name] = process.pid\r\n        except Exception:\r\n            pass\r\n        \r\n        return {\r\n            \"success\": True,\r\n            \"message\": \"Game launched successfully\",\r\n            \"game\": game_name,\r\n            \"pid\": process.pid\r\n        }\r\n            \r\n    except Exception as e:\r\n        raise HTTPException(status_code=500, detail=f\"Failed to launch game: {str(e)}\")\r\n\r\n@app.post(\"/api/terminate-game\")\r\nasync def terminate_game(game: Optional[str] = Form(None), pid: Optional[int] = Form(None)):\r\n    \"\"\"Terminate a running game process by game name or PID (Windows-safe).\"\"\"\r\n    try:\r\n        target_pid: Optional[int] = None\r\n        if pid:\r\n            target_pid = int(pid)\r\n        elif game and game in running_games:\r\n            target_pid = running_games.get(game)\r\n        if not target_pid:\r\n            return {\"terminated\": False, \"reason\": \"no pid\"}\r\n        # Try graceful terminate first\r\n        try:\r\n            os.kill(target_pid, signal.SIGTERM)\r\n        except Exception:\r\n            # Fallback to taskkill on Windows\r\n            try:\r\n                subprocess.run([\"taskkill\", \"/PID\", str(target_pid), \"/F\", \"/T\"], capture_output=True)\r\n            except Exception:\r\n                pass\r\n        # Remove from registry\r\n        for k, v in list(running_games.items()):\r\n            if v == target_pid:\r\n                running_games.pop(k, None)\r\n        return {\"terminated\": True, \"pid\": target_pid}\r\n    except Exception as e:\r\n        raise HTTPException(status_code=500, detail=f\"Terminate failed: {e}\")\r\n\r\n@app.get(\"/api/games\")\r\n@app.get(\"/api/games/list\")\r\n@app.get(\"/games-api\")\r\nasync def list_games():\r\n    \"\"\"Auto-discover available games in the Games/ folder by scanning for launch_*.py scripts.\"\"\"\r\n    games_dir = os.path.join(os.getcwd(), \"Games\")\r\n    result = []\r\n    try:\r\n        if not os.path.isdir(games_dir):\r\n            return {\"games\": []}\r\n\r\n        for name in os.listdir(games_dir):\r\n            if not name.lower().endswith(\".py\"):\r\n                continue\r\n            lower = name.lower()\r\n            if not lower.startswith(\"launch_\"):\r\n                continue\r\n            # Derive game id from filename, supporting patterns like launch_<id>_game.py or launch_<id>.py\r\n            base = os.path.splitext(name)[0]\r\n            core = base[len(\"launch_\"):]\r\n            if core.endswith(\"_game\"):\r\n                core = core[:-len(\"_game\")]\r\n            game_id = core\r\n\r\n            # Friendly labels and descriptions for common games\r\n            label_map = {\r\n                \"dino\": \"Chrome Dino\",\r\n                \"2048\": \"2048\",\r\n                \"tetris\": \"Tetris\",\r\n                \"snake\": \"Snake\",\r\n            }\r\n            desc_map = {\r\n                \"dino\": \"Jump and dodge obstacles.\",\r\n                \"2048\": \"Combine tiles to reach 2048.\",\r\n                \"tetris\": \"Stack blocks to clear lines.\",\r\n                \"snake\": \"Grow by eating, avoid walls.\",\r\n            }\r\n\r\n            result.append({\r\n                \"id\": game_id,\r\n                \"label\": label_map.get(game_id, game_id.title()),\r\n                \"description\": desc_map.get(game_id, \"Play the game\"),\r\n                \"launcher\": name,\r\n            })\r\n        # Sort for stable display\r\n        result.sort(key=lambda x: x[\"label\"].lower())\r\n        return {\"games\": result}\r\n    except Exception:\r\n        return {\"games\": []}\r\n\r\n@app.get(\"/api/game-result/{game_name}\")\r\nasync def get_game_result(game_name: str):\r\n    \"\"\"Get the result of a completed game\"\"\"\r\n    try:\r\n        result_file = os.path.join(os.getcwd(), \"Games\", \"game_result.json\")\r\n        \r\n        if not os.path.exists(result_file):\r\n            return {\r\n                \"completed\": False,\r\n                \"coins_earned\": 0,\r\n                \"score\": 0\r\n            }\r\n        \r\n        with open(result_file, 'r') as f:\r\n            result_data = json.load(f)\r\n        \r\n        # Check if the result is for the requested game\r\n        if result_data.get('game') != game_name:\r\n            return {\r\n                \"completed\": False,\r\n                \"coins_earned\": 0,\r\n                \"score\": 0\r\n            }\r\n        \r\n        # Check if the result is recent (within last 5 minutes)\r\n        result_time = datetime.fromisoformat(result_data.get('timestamp', '2000-01-01T00:00:00'))\r\n        time_diff = datetime.now() - result_time\r\n        \r\n        if time_diff.total_seconds() > 300:  # 5 minutes\r\n            return {\r\n                \"completed\": False,\r\n                \"coins_earned\": 0,\r\n                \"score\": 0\r\n            }\r\n        \r\n        # If file exists but not completed yet, still report not completed\r\n        if not result_data.get('completed', False):\r\n            return {\r\n                \"completed\": False,\r\n                \"coins_earned\": 0,\r\n                \"score\": 0\r\n            }\r\n\r\n        result = {\r\n            \"completed\": True,\r\n            \"coins_earned\": result_data.get('coins_earned', 0),\r\n            \"score\": result_data.get('score', 0),\r\n            \"timestamp\": result_data.get('timestamp'),\r\n            \"game\": result_data.get('game', game_name)\r\n        }\r\n        # Attempt to terminate leftover process\r\n        try:\r\n            pid = running_games.pop(game_name, None)\r\n            if pid:\r\n                try:\r\n                    os.kill(pid, signal.SIGTERM)\r\n                except Exception:\r\n                    subprocess.run([\"taskkill\", \"/PID\", str(pid), \"/F\", \"/T\"], capture_output=True)\r\n        except Exception:\r\n            pass\r\n        return result\r\n    except Exception as e:\r\n        raise HTTPException(status_code=500, detail=f\"Failed to get game result: {e}\")\r\n\r\n@app.post(\"/api/report-game-result\")\r\nasync def report_game_result(\r\n    game: str = Form(...),\r\n    score: int = Form(0),\r\n    coins_earned: int = Form(0)\r\n):\r\n    \"\"\"Allow React games to report results directly without relying on filesystem writes.\"\"\"\r\n    try:\r\n        # Clamp coins for safety\r\n        if coins_earned < 0:\r\n            coins_earned = 0\r\n        if coins_earned > 5:\r\n            coins_earned = 5\r\n        # Write the same file so existing polling still works\r\n        games_dir = os.path.join(os.getcwd(), \"Games\")\r\n        os.makedirs(games_dir, exist_ok=True)\r\n        result = {\r\n            \"game\": game,\r\n            \"completed\": True,\r\n            \"coins_earned\": int(coins_earned),\r\n            \"score\": int(score),\r\n            \"timestamp\": datetime.now().isoformat()\r\n        }\r\n        with open(os.path.join(games_dir, \"game_result.json\"), \"w\") as f:\r\n            json.dump(result, f)\r\n        return {\"ok\": True}\r\n    except Exception as e:\r\n        raise HTTPException(status_code=500, detail=f\"Report failed: {e}\")\r\n\r\nif __name__ == \"__main__\":\r\n    import uvicorn\r\n    import os\r\n    # Enable auto-reload so the server restarts when code changes are detected\r\n    # Use the import string form so Uvicorn's reloader can re-import the app\r\n    uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000, reload=True, reload_dirs=[os.getcwd()])\r\n","size_bytes":46979},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertMoodEntrySchema, insertGameScoreSchema, insertUserProgressSchema, insertMovieSchema, insertVideoSchema, insertSongSchema, insertRewardSchema, updateMovieSchema, updateVideoSchema, updateSongSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Get current user (default user for demo)\n  app.get(\"/api/user\", async (req, res) => {\n    try {\n      const user = await storage.getUser(\"user-1\");\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Get user progress\n  app.get(\"/api/user/progress\", async (req, res) => {\n    try {\n      const progress = await storage.getUserProgress(\"user-1\");\n      res.json(progress);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user progress\" });\n    }\n  });\n\n  // Update user progress\n  app.post(\"/api/user/progress\", async (req, res) => {\n    try {\n      const validatedData = insertUserProgressSchema.parse({\n        ...req.body,\n        userId: \"user-1\"\n      });\n      const progress = await storage.createOrUpdateUserProgress(validatedData);\n      res.json(progress);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid progress data\" });\n    }\n  });\n\n  // Get user mood entries\n  app.get(\"/api/user/mood\", async (req, res) => {\n    try {\n      const moodEntries = await storage.getUserMoodEntries(\"user-1\", 30);\n      res.json(moodEntries);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch mood entries\" });\n    }\n  });\n\n  // Create mood entry\n  app.post(\"/api/user/mood\", async (req, res) => {\n    try {\n      const validatedData = insertMoodEntrySchema.parse({\n        ...req.body,\n        userId: \"user-1\"\n      });\n      const moodEntry = await storage.createMoodEntry(validatedData);\n      res.json(moodEntry);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid mood data\" });\n    }\n  });\n\n  // Get user game scores\n  app.get(\"/api/user/scores\", async (req, res) => {\n    try {\n      const { gameId } = req.query;\n      const scores = await storage.getUserGameScores(\"user-1\", gameId as string);\n      res.json(scores);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch game scores\" });\n    }\n  });\n\n  // Create game score\n  app.post(\"/api/user/scores\", async (req, res) => {\n    try {\n      const validatedData = insertGameScoreSchema.parse({\n        ...req.body,\n        userId: \"user-1\"\n      });\n      \n      // Update user XP\n      const currentUser = await storage.getUser(\"user-1\");\n      if (currentUser) {\n        await storage.updateUser(\"user-1\", {\n          xp: currentUser.xp + validatedData.xpEarned\n        });\n      }\n\n      const gameScore = await storage.createGameScore(validatedData);\n      res.json(gameScore);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid score data\" });\n    }\n  });\n\n  // Movie routes\n  app.get(\"/api/movies\", async (req, res) => {\n    try {\n      const { category } = req.query;\n      const movies = await storage.getMovies(category as string);\n      res.json(movies);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch movies\" });\n    }\n  });\n\n  app.get(\"/api/movies/:id\", async (req, res) => {\n    try {\n      const movie = await storage.getMovie(req.params.id);\n      if (!movie) {\n        return res.status(404).json({ message: \"Movie not found\" });\n      }\n      res.json(movie);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch movie\" });\n    }\n  });\n\n  app.post(\"/api/movies\", async (req, res) => {\n    try {\n      const validatedData = insertMovieSchema.parse(req.body);\n      const movie = await storage.createMovie(validatedData);\n      res.status(201).json(movie);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid movie data\" });\n    }\n  });\n\n  app.put(\"/api/movies/:id\", async (req, res) => {\n    try {\n      const validatedUpdates = updateMovieSchema.parse(req.body);\n      const movie = await storage.updateMovie(req.params.id, validatedUpdates);\n      if (!movie) {\n        return res.status(404).json({ message: \"Movie not found\" });\n      }\n      res.json(movie);\n    } catch (error) {\n      res.status(422).json({ message: \"Invalid update data\", details: error });\n    }\n  });\n\n  app.delete(\"/api/movies/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteMovie(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Movie not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete movie\" });\n    }\n  });\n\n  // Video routes\n  app.get(\"/api/videos\", async (req, res) => {\n    try {\n      const { category } = req.query;\n      const videos = await storage.getVideos(category as string);\n      res.json(videos);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch videos\" });\n    }\n  });\n\n  app.get(\"/api/videos/:id\", async (req, res) => {\n    try {\n      const video = await storage.getVideo(req.params.id);\n      if (!video) {\n        return res.status(404).json({ message: \"Video not found\" });\n      }\n      res.json(video);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch video\" });\n    }\n  });\n\n  app.post(\"/api/videos\", async (req, res) => {\n    try {\n      const validatedData = insertVideoSchema.parse({\n        ...req.body,\n        userId: \"user-1\"\n      });\n      const video = await storage.createVideo(validatedData);\n      res.status(201).json(video);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid video data\" });\n    }\n  });\n\n  app.put(\"/api/videos/:id\", async (req, res) => {\n    try {\n      const validatedUpdates = updateVideoSchema.parse(req.body);\n      const video = await storage.updateVideo(req.params.id, validatedUpdates);\n      if (!video) {\n        return res.status(404).json({ message: \"Video not found\" });\n      }\n      res.json(video);\n    } catch (error) {\n      res.status(422).json({ message: \"Invalid update data\", details: error });\n    }\n  });\n\n  app.delete(\"/api/videos/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteVideo(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Video not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete video\" });\n    }\n  });\n\n  app.post(\"/api/videos/:id/watch\", async (req, res) => {\n    try {\n      const video = await storage.getVideo(req.params.id);\n      if (!video) {\n        return res.status(404).json({ message: \"Video not found\" });\n      }\n      \n      // Award coins for watching video (2 coins per video)\n      const transaction = await storage.earnCoins(\"user-1\", 2, \"video\", req.params.id, `Watched: ${video.title}`);\n      res.json({ message: \"Coins earned!\", transaction });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to award coins\" });\n    }\n  });\n\n  // Song routes\n  app.get(\"/api/songs\", async (req, res) => {\n    try {\n      const { category } = req.query;\n      const songs = await storage.getSongs(category as string);\n      res.json(songs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch songs\" });\n    }\n  });\n\n  app.get(\"/api/songs/:id\", async (req, res) => {\n    try {\n      const song = await storage.getSong(req.params.id);\n      if (!song) {\n        return res.status(404).json({ message: \"Song not found\" });\n      }\n      res.json(song);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch song\" });\n    }\n  });\n\n  app.post(\"/api/songs\", async (req, res) => {\n    try {\n      const validatedData = insertSongSchema.parse({\n        ...req.body,\n        userId: \"user-1\"\n      });\n      const song = await storage.createSong(validatedData);\n      res.status(201).json(song);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid song data\" });\n    }\n  });\n\n  app.put(\"/api/songs/:id\", async (req, res) => {\n    try {\n      const validatedUpdates = updateSongSchema.parse(req.body);\n      const song = await storage.updateSong(req.params.id, validatedUpdates);\n      if (!song) {\n        return res.status(404).json({ message: \"Song not found\" });\n      }\n      res.json(song);\n    } catch (error) {\n      res.status(422).json({ message: \"Invalid update data\", details: error });\n    }\n  });\n\n  app.delete(\"/api/songs/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteSong(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Song not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete song\" });\n    }\n  });\n\n  app.post(\"/api/songs/:id/listen\", async (req, res) => {\n    try {\n      const song = await storage.getSong(req.params.id);\n      if (!song) {\n        return res.status(404).json({ message: \"Song not found\" });\n      }\n      \n      // Award coins for listening to song (2 coins per song)\n      const transaction = await storage.earnCoins(\"user-1\", 2, \"song\", req.params.id, `Listened to: ${song.title}`);\n      res.json({ message: \"Coins earned!\", transaction });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to award coins\" });\n    }\n  });\n\n  // Coin transaction routes\n  app.get(\"/api/user/coins/transactions\", async (req, res) => {\n    try {\n      const { limit = 50 } = req.query;\n      const transactions = await storage.getUserCoinTransactions(\"user-1\", parseInt(limit as string));\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.post(\"/api/user/coins/earn\", async (req, res) => {\n    try {\n      const { amount, source, sourceId, description } = req.body;\n      \n      // Validate input data\n      if (!amount || typeof amount !== 'number' || amount <= 0 || amount > 100) {\n        return res.status(400).json({ message: \"Invalid amount - must be a positive number up to 100\" });\n      }\n      \n      if (!source || typeof source !== 'string' || !['achievement', 'daily', 'bonus'].includes(source)) {\n        return res.status(400).json({ message: \"Invalid source - must be achievement, daily, or bonus\" });\n      }\n      \n      const transaction = await storage.earnCoins(\"user-1\", amount, source, sourceId, description);\n      res.json(transaction);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Failed to earn coins\" });\n    }\n  });\n\n  // Reward routes\n  app.get(\"/api/rewards\", async (req, res) => {\n    try {\n      const { category, available } = req.query;\n      const isAvailable = available === 'true' ? true : available === 'false' ? false : undefined;\n      const rewards = await storage.getRewards(category as string, isAvailable);\n      res.json(rewards);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch rewards\" });\n    }\n  });\n\n  app.get(\"/api/rewards/:id\", async (req, res) => {\n    try {\n      const reward = await storage.getReward(req.params.id);\n      if (!reward) {\n        return res.status(404).json({ message: \"Reward not found\" });\n      }\n      res.json(reward);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch reward\" });\n    }\n  });\n\n  app.post(\"/api/rewards\", async (req, res) => {\n    try {\n      const validatedData = insertRewardSchema.parse(req.body);\n      const reward = await storage.createReward(validatedData);\n      res.status(201).json(reward);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid reward data\" });\n    }\n  });\n\n  // User reward routes\n  app.get(\"/api/user/rewards\", async (req, res) => {\n    try {\n      const userRewards = await storage.getUserRewards(\"user-1\");\n      res.json(userRewards);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user rewards\" });\n    }\n  });\n\n  app.post(\"/api/user/rewards/:rewardId/redeem\", async (req, res) => {\n    try {\n      const userReward = await storage.redeemReward(\"user-1\", req.params.rewardId);\n      if (!userReward) {\n        return res.status(400).json({ message: \"Unable to redeem reward - insufficient coins or reward unavailable\" });\n      }\n      res.json(userReward);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to redeem reward\" });\n    }\n  });\n\n  app.put(\"/api/user/rewards/:id/use\", async (req, res) => {\n    try {\n      const userReward = await storage.markRewardAsUsed(req.params.id);\n      if (!userReward) {\n        return res.status(404).json({ message: \"User reward not found\" });\n      }\n      res.json(userReward);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark reward as used\" });\n    }\n  });\n\n  // Search route\n  app.get(\"/api/search\", async (req, res) => {\n    try {\n      const { q, category, limit = 20 } = req.query;\n      if (!q) {\n        return res.status(400).json({ message: \"Search query is required\" });\n      }\n      const results = await storage.searchContent(q as string, category as string, parseInt(limit as string));\n      res.json(results);\n    } catch (error) {\n      res.status(500).json({ message: \"Search failed\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":13655},"server/storage.ts":{"content":"import { type User, type InsertUser, type UserProgress, type InsertUserProgress, type MoodEntry, type InsertMoodEntry, type GameScore, type InsertGameScore, type Movie, type InsertMovie, type Video, type InsertVideo, type Song, type InsertSong, type CoinTransaction, type InsertCoinTransaction, type Reward, type InsertReward, type UserReward, type InsertUserReward } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n\n  // User progress methods\n  getUserProgress(userId: string): Promise<UserProgress[]>;\n  getUserProgressBySubject(userId: string, subject: string): Promise<UserProgress | undefined>;\n  createOrUpdateUserProgress(progress: InsertUserProgress): Promise<UserProgress>;\n\n  // Mood tracking methods\n  getUserMoodEntries(userId: string, limit?: number): Promise<MoodEntry[]>;\n  createMoodEntry(moodEntry: InsertMoodEntry): Promise<MoodEntry>;\n\n  // Game score methods\n  getUserGameScores(userId: string, gameId?: string): Promise<GameScore[]>;\n  createGameScore(gameScore: InsertGameScore): Promise<GameScore>;\n\n  // Movie methods\n  getMovies(category?: string): Promise<Movie[]>;\n  getMovie(id: string): Promise<Movie | undefined>;\n  createMovie(movie: InsertMovie): Promise<Movie>;\n  updateMovie(id: string, updates: Partial<Movie>): Promise<Movie | undefined>;\n  deleteMovie(id: string): Promise<boolean>;\n\n  // Video methods\n  getVideos(category?: string): Promise<Video[]>;\n  getVideo(id: string): Promise<Video | undefined>;\n  createVideo(video: InsertVideo): Promise<Video>;\n  updateVideo(id: string, updates: Partial<Video>): Promise<Video | undefined>;\n  deleteVideo(id: string): Promise<boolean>;\n\n  // Song methods\n  getSongs(category?: string): Promise<Song[]>;\n  getSong(id: string): Promise<Song | undefined>;\n  createSong(song: InsertSong): Promise<Song>;\n  updateSong(id: string, updates: Partial<Song>): Promise<Song | undefined>;\n  deleteSong(id: string): Promise<boolean>;\n\n  // Coin transaction methods\n  getUserCoinTransactions(userId: string, limit?: number): Promise<CoinTransaction[]>;\n  createCoinTransaction(transaction: InsertCoinTransaction): Promise<CoinTransaction>;\n  earnCoins(userId: string, amount: number, source: string, sourceId?: string, description?: string): Promise<CoinTransaction>;\n  spendCoins(userId: string, amount: number, source: string, sourceId?: string, description?: string): Promise<CoinTransaction | null>;\n\n  // Reward methods\n  getRewards(category?: string, isAvailable?: boolean): Promise<Reward[]>;\n  getReward(id: string): Promise<Reward | undefined>;\n  createReward(reward: InsertReward): Promise<Reward>;\n  updateReward(id: string, updates: Partial<Reward>): Promise<Reward | undefined>;\n\n  // User reward methods\n  getUserRewards(userId: string): Promise<UserReward[]>;\n  getUserReward(userId: string, rewardId: string): Promise<UserReward | undefined>;\n  redeemReward(userId: string, rewardId: string): Promise<UserReward | null>;\n  markRewardAsUsed(id: string): Promise<UserReward | undefined>;\n\n  // Search methods\n  searchContent(query: string, category?: string, limit?: number): Promise<any[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private userProgress: Map<string, UserProgress>;\n  private moodEntries: Map<string, MoodEntry>;\n  private gameScores: Map<string, GameScore>;\n  private movies: Map<string, Movie>;\n  private videos: Map<string, Video>;\n  private songs: Map<string, Song>;\n  private coinTransactions: Map<string, CoinTransaction>;\n  private rewards: Map<string, Reward>;\n  private userRewards: Map<string, UserReward>;\n\n  constructor() {\n    this.users = new Map();\n    this.userProgress = new Map();\n    this.moodEntries = new Map();\n    this.gameScores = new Map();\n    this.movies = new Map();\n    this.videos = new Map();\n    this.songs = new Map();\n    this.coinTransactions = new Map();\n    this.rewards = new Map();\n    this.userRewards = new Map();\n\n    // Create default user\n    const defaultUser: User = {\n      id: \"user-1\",\n      username: \"AstroBeth\",\n      email: \"astrobeth@edumind.com\",\n      level: 7,\n      xp: 2450,\n      coins: 25,\n      streakDays: 5,\n      lastActivity: new Date(),\n      achievements: [\"first_login\", \"mood_tracker\", \"study_streak\"],\n      avatar: null,\n      createdAt: new Date(),\n    };\n    this.users.set(defaultUser.id, defaultUser);\n\n    // Create default progress data\n    const mathProgress: UserProgress = {\n      id: \"progress-1\",\n      userId: \"user-1\",\n      subject: \"Mathematics\",\n      level: 8,\n      progress: 75,\n      lastActivity: new Date(),\n    };\n    this.userProgress.set(mathProgress.id, mathProgress);\n\n    const scienceProgress: UserProgress = {\n      id: \"progress-2\",\n      userId: \"user-1\",\n      subject: \"Science\",\n      level: 6,\n      progress: 60,\n      lastActivity: new Date(),\n    };\n    this.userProgress.set(scienceProgress.id, scienceProgress);\n\n    const languageProgress: UserProgress = {\n      id: \"progress-3\",\n      userId: \"user-1\",\n      subject: \"Languages\",\n      level: 7,\n      progress: 90,\n      lastActivity: new Date(),\n    };\n    this.userProgress.set(languageProgress.id, languageProgress);\n\n    // Add sample movies\n    const sampleMovies: Movie[] = [\n      {\n        id: \"movie-1\",\n        title: \"Focus Meditation Journey\",\n        description: \"A guided meditation experience to enhance concentration and mindfulness\",\n        genre: \"Educational, Wellness\",\n        year: 2024,\n        rating: 4.8,\n        posterUrl: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&w=400\",\n        backdropUrl: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&w=800\",\n        cast: [\"Dr. Sarah Wilson\", \"Mark Thompson\"],\n        director: \"Lisa Chen\",\n        duration: \"15 min\",\n        category: \"wellness\",\n        createdAt: new Date(),\n      },\n      {\n        id: \"movie-2\", \n        title: \"Mathematics Made Simple\",\n        description: \"Interactive learning approach to mastering basic mathematics concepts\",\n        genre: \"Educational\",\n        year: 2024,\n        rating: 4.5,\n        posterUrl: \"https://images.unsplash.com/photo-1453396450673-3fe83d2db2c4?ixlib=rb-4.0.3&w=400\",\n        backdropUrl: \"https://images.unsplash.com/photo-1453396450673-3fe83d2db2c4?ixlib=rb-4.0.3&w=800\",\n        cast: [\"Prof. Ahmed Khan\"],\n        director: \"Educational Team\",\n        duration: \"25 min\",\n        category: \"education\",\n        createdAt: new Date(),\n      },\n    ];\n    sampleMovies.forEach(movie => this.movies.set(movie.id, movie));\n\n    // Add sample videos\n    const sampleVideos: Video[] = [\n      {\n        id: \"video-1\",\n        title: \"Morning Yoga Flow\",\n        description: \"Start your day with this energizing 10-minute yoga routine\",\n        category: \"yoga\",\n        duration: \"10:00\",\n        posterUrl: \"https://images.unsplash.com/photo-1599901860904-17e6ed7083a0?ixlib=rb-4.0.3&w=400\",\n        videoUrl: \"/videos/morning-yoga.mp4\",\n        userId: \"user-1\",\n        createdAt: new Date(),\n      },\n      {\n        id: \"video-2\",\n        title: \"Breathing Techniques for Focus\",\n        description: \"Learn powerful breathing exercises to improve concentration\",\n        category: \"meditation\",\n        duration: \"8:00\", \n        posterUrl: \"https://images.unsplash.com/photo-1540479859555-17af45c78602?ixlib=rb-4.0.3&w=400\",\n        videoUrl: \"/videos/breathing-focus.mp4\",\n        userId: \"user-1\",\n        createdAt: new Date(),\n      },\n    ];\n    sampleVideos.forEach(video => this.videos.set(video.id, video));\n\n    // Add sample songs\n    const sampleSongs: Song[] = [\n      {\n        id: \"song-1\",\n        title: \"Calm Ocean Waves\",\n        description: \"Soothing ocean sounds for relaxation and sleep\",\n        category: \"Audio\",\n        duration: \"30:00\",\n        posterUrl: \"https://images.unsplash.com/photo-1439066615861-d1af74d74000?ixlib=rb-4.0.3&w=400\",\n        audioUrl: \"/audio/ocean-waves.mp3\",\n        userId: null,\n        createdAt: new Date(),\n      },\n      {\n        id: \"song-2\",\n        title: \"Forest Meditation Music\",\n        description: \"Peaceful forest sounds with gentle music for meditation\",\n        category: \"Audio\",\n        duration: \"20:00\",\n        posterUrl: \"https://images.unsplash.com/photo-1441974231531-c6227db76b6e?ixlib=rb-4.0.3&w=400\", \n        audioUrl: \"/audio/forest-meditation.mp3\",\n        userId: null,\n        createdAt: new Date(),\n      },\n    ];\n    sampleSongs.forEach(song => this.songs.set(song.id, song));\n\n    // Add sample rewards\n    const sampleRewards: Reward[] = [\n      {\n        id: \"reward-1\",\n        name: \"Premium Meditation Pack\",\n        description: \"Unlock 5 exclusive guided meditation sessions\",\n        cost: 10,\n        category: \"premium_content\",\n        type: \"video\",\n        data: { videoIds: [\"premium-med-1\", \"premium-med-2\", \"premium-med-3\"] },\n        isAvailable: true,\n        createdAt: new Date(),\n      },\n      {\n        id: \"reward-2\",\n        name: \"Zen Master Badge\",\n        description: \"Show off your meditation mastery with this exclusive badge\",\n        cost: 15,\n        category: \"digital\",\n        type: \"badge\",\n        data: { badgeName: \"zen_master\", icon: \"🧘\", rarity: \"rare\" },\n        isAvailable: true,\n        createdAt: new Date(),\n      },\n    ];\n    sampleRewards.forEach(reward => this.rewards.set(reward.id, reward));\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id, \n      email: insertUser.email || null,\n      level: insertUser.level || 1,\n      xp: insertUser.xp || 0,\n      coins: insertUser.coins || 0,\n      streakDays: insertUser.streakDays || 0,\n      lastActivity: new Date(),\n      achievements: insertUser.achievements || [],\n      avatar: insertUser.avatar || null,\n      createdAt: new Date() \n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async getUserProgress(userId: string): Promise<UserProgress[]> {\n    return Array.from(this.userProgress.values()).filter(\n      (progress) => progress.userId === userId\n    );\n  }\n\n  async getUserProgressBySubject(userId: string, subject: string): Promise<UserProgress | undefined> {\n    return Array.from(this.userProgress.values()).find(\n      (progress) => progress.userId === userId && progress.subject === subject\n    );\n  }\n\n  async createOrUpdateUserProgress(insertProgress: InsertUserProgress): Promise<UserProgress> {\n    const existing = await this.getUserProgressBySubject(insertProgress.userId, insertProgress.subject);\n    \n    if (existing) {\n      const updated = { ...existing, ...insertProgress, lastActivity: new Date() };\n      this.userProgress.set(existing.id, updated);\n      return updated;\n    } else {\n      const id = randomUUID();\n      const progress: UserProgress = { \n        ...insertProgress, \n        id, \n        level: insertProgress.level || 1,\n        progress: insertProgress.progress || 0,\n        lastActivity: new Date() \n      };\n      this.userProgress.set(id, progress);\n      return progress;\n    }\n  }\n\n  async getUserMoodEntries(userId: string, limit = 10): Promise<MoodEntry[]> {\n    return Array.from(this.moodEntries.values())\n      .filter((entry) => entry.userId === userId)\n      .sort((a, b) => b.timestamp!.getTime() - a.timestamp!.getTime())\n      .slice(0, limit);\n  }\n\n  async createMoodEntry(insertMoodEntry: InsertMoodEntry): Promise<MoodEntry> {\n    const id = randomUUID();\n    const moodEntry: MoodEntry = { \n      ...insertMoodEntry, \n      id, \n      timestamp: new Date() \n    };\n    this.moodEntries.set(id, moodEntry);\n    return moodEntry;\n  }\n\n  async getUserGameScores(userId: string, gameId?: string): Promise<GameScore[]> {\n    return Array.from(this.gameScores.values())\n      .filter((score) => score.userId === userId && (!gameId || score.gameId === gameId))\n      .sort((a, b) => b.completedAt!.getTime() - a.completedAt!.getTime());\n  }\n\n  async createGameScore(insertGameScore: InsertGameScore): Promise<GameScore> {\n    const id = randomUUID();\n    const gameScore: GameScore = { \n      ...insertGameScore, \n      id, \n      completedAt: new Date() \n    };\n    this.gameScores.set(id, gameScore);\n    return gameScore;\n  }\n\n  // Movie methods\n  async getMovies(category?: string): Promise<Movie[]> {\n    const allMovies = Array.from(this.movies.values());\n    if (category) {\n      return allMovies.filter(movie => movie.category === category);\n    }\n    return allMovies.sort((a, b) => b.createdAt!.getTime() - a.createdAt!.getTime());\n  }\n\n  async getMovie(id: string): Promise<Movie | undefined> {\n    return this.movies.get(id);\n  }\n\n  async createMovie(insertMovie: InsertMovie): Promise<Movie> {\n    const id = randomUUID();\n    const movie: Movie = {\n      ...insertMovie,\n      id,\n      createdAt: new Date(),\n    };\n    this.movies.set(id, movie);\n    return movie;\n  }\n\n  async updateMovie(id: string, updates: Partial<Movie>): Promise<Movie | undefined> {\n    const movie = this.movies.get(id);\n    if (!movie) return undefined;\n    \n    const updatedMovie = { ...movie, ...updates };\n    this.movies.set(id, updatedMovie);\n    return updatedMovie;\n  }\n\n  async deleteMovie(id: string): Promise<boolean> {\n    return this.movies.delete(id);\n  }\n\n  // Video methods\n  async getVideos(category?: string): Promise<Video[]> {\n    const allVideos = Array.from(this.videos.values());\n    if (category) {\n      return allVideos.filter(video => video.category === category);\n    }\n    return allVideos.sort((a, b) => b.createdAt!.getTime() - a.createdAt!.getTime());\n  }\n\n  async getVideo(id: string): Promise<Video | undefined> {\n    return this.videos.get(id);\n  }\n\n  async createVideo(insertVideo: InsertVideo): Promise<Video> {\n    const id = randomUUID();\n    const video: Video = {\n      ...insertVideo,\n      id,\n      createdAt: new Date(),\n    };\n    this.videos.set(id, video);\n    return video;\n  }\n\n  async updateVideo(id: string, updates: Partial<Video>): Promise<Video | undefined> {\n    const video = this.videos.get(id);\n    if (!video) return undefined;\n    \n    const updatedVideo = { ...video, ...updates };\n    this.videos.set(id, updatedVideo);\n    return updatedVideo;\n  }\n\n  async deleteVideo(id: string): Promise<boolean> {\n    return this.videos.delete(id);\n  }\n\n  // Song methods\n  async getSongs(category?: string): Promise<Song[]> {\n    const allSongs = Array.from(this.songs.values());\n    if (category) {\n      return allSongs.filter(song => song.category === category);\n    }\n    return allSongs.sort((a, b) => b.createdAt!.getTime() - a.createdAt!.getTime());\n  }\n\n  async getSong(id: string): Promise<Song | undefined> {\n    return this.songs.get(id);\n  }\n\n  async createSong(insertSong: InsertSong): Promise<Song> {\n    const id = randomUUID();\n    const song: Song = {\n      ...insertSong,\n      id,\n      createdAt: new Date(),\n    };\n    this.songs.set(id, song);\n    return song;\n  }\n\n  async updateSong(id: string, updates: Partial<Song>): Promise<Song | undefined> {\n    const song = this.songs.get(id);\n    if (!song) return undefined;\n    \n    const updatedSong = { ...song, ...updates };\n    this.songs.set(id, updatedSong);\n    return updatedSong;\n  }\n\n  async deleteSong(id: string): Promise<boolean> {\n    return this.songs.delete(id);\n  }\n\n  // Coin transaction methods\n  async getUserCoinTransactions(userId: string, limit: number = 50): Promise<CoinTransaction[]> {\n    return Array.from(this.coinTransactions.values())\n      .filter(transaction => transaction.userId === userId)\n      .sort((a, b) => b.timestamp!.getTime() - a.timestamp!.getTime())\n      .slice(0, limit);\n  }\n\n  async createCoinTransaction(insertTransaction: InsertCoinTransaction): Promise<CoinTransaction> {\n    const id = randomUUID();\n    const transaction: CoinTransaction = {\n      ...insertTransaction,\n      id,\n      timestamp: new Date(),\n    };\n    this.coinTransactions.set(id, transaction);\n    return transaction;\n  }\n\n  async earnCoins(userId: string, amount: number, source: string, sourceId?: string, description?: string): Promise<CoinTransaction> {\n    if (amount <= 0) {\n      throw new Error('Amount must be positive');\n    }\n    \n    // Update user's coin balance\n    const user = await this.getUser(userId);\n    if (!user) {\n      throw new Error('User not found');\n    }\n    \n    const updatedUser = { ...user, coins: user.coins + amount };\n    this.users.set(userId, updatedUser);\n    \n    // Create transaction record\n    const transaction = await this.createCoinTransaction({\n      userId,\n      amount,\n      transactionType: 'earn',\n      source,\n      sourceId: sourceId || null,\n      description: description || `Earned ${amount} coins from ${source}`,\n    });\n    \n    return transaction;\n  }\n\n  async spendCoins(userId: string, amount: number, source: string, sourceId?: string, description?: string): Promise<CoinTransaction | null> {\n    if (amount <= 0) {\n      throw new Error('Amount must be positive');\n    }\n    \n    // Check user's coin balance\n    const user = await this.getUser(userId);\n    if (!user) {\n      throw new Error('User not found');\n    }\n    \n    if (user.coins < amount) {\n      return null; // Insufficient funds\n    }\n    \n    // Update user's coin balance\n    const updatedUser = { ...user, coins: user.coins - amount };\n    this.users.set(userId, updatedUser);\n    \n    // Create transaction record\n    const transaction = await this.createCoinTransaction({\n      userId,\n      amount,\n      transactionType: 'spend',\n      source,\n      sourceId: sourceId || null,\n      description: description || `Spent ${amount} coins on ${source}`,\n    });\n    \n    return transaction;\n  }\n\n  // Reward methods\n  async getRewards(category?: string, isAvailable?: boolean): Promise<Reward[]> {\n    let rewards = Array.from(this.rewards.values());\n    \n    if (category) {\n      rewards = rewards.filter(reward => reward.category === category);\n    }\n    \n    if (isAvailable !== undefined) {\n      rewards = rewards.filter(reward => reward.isAvailable === isAvailable);\n    }\n    \n    return rewards.sort((a, b) => a.cost - b.cost);\n  }\n\n  async getReward(id: string): Promise<Reward | undefined> {\n    return this.rewards.get(id);\n  }\n\n  async createReward(insertReward: InsertReward): Promise<Reward> {\n    const id = randomUUID();\n    const reward: Reward = {\n      ...insertReward,\n      id,\n      createdAt: new Date(),\n    };\n    this.rewards.set(id, reward);\n    return reward;\n  }\n\n  async updateReward(id: string, updates: Partial<Reward>): Promise<Reward | undefined> {\n    const reward = this.rewards.get(id);\n    if (!reward) return undefined;\n    \n    const updatedReward = { ...reward, ...updates };\n    this.rewards.set(id, updatedReward);\n    return updatedReward;\n  }\n\n  // User reward methods\n  async getUserRewards(userId: string): Promise<UserReward[]> {\n    return Array.from(this.userRewards.values())\n      .filter(userReward => userReward.userId === userId)\n      .sort((a, b) => b.redeemedAt!.getTime() - a.redeemedAt!.getTime());\n  }\n\n  async getUserReward(userId: string, rewardId: string): Promise<UserReward | undefined> {\n    return Array.from(this.userRewards.values())\n      .find(userReward => userReward.userId === userId && userReward.rewardId === rewardId);\n  }\n\n  async redeemReward(userId: string, rewardId: string): Promise<UserReward | null> {\n    // Check if reward exists and is available\n    const reward = await this.getReward(rewardId);\n    if (!reward || !reward.isAvailable) {\n      return null;\n    }\n    \n    // Try to spend coins\n    const transaction = await this.spendCoins(userId, reward.cost, 'reward', rewardId, `Redeemed ${reward.name}`);\n    if (!transaction) {\n      return null; // Insufficient funds\n    }\n    \n    // Create user reward record\n    const id = randomUUID();\n    const userReward: UserReward = {\n      id,\n      userId,\n      rewardId,\n      isUsed: false,\n      redeemedAt: new Date(),\n      usedAt: null,\n    };\n    this.userRewards.set(id, userReward);\n    return userReward;\n  }\n\n  async markRewardAsUsed(id: string): Promise<UserReward | undefined> {\n    const userReward = this.userRewards.get(id);\n    if (!userReward) return undefined;\n    \n    const updatedUserReward = { ...userReward, isUsed: true, usedAt: new Date() };\n    this.userRewards.set(id, updatedUserReward);\n    return updatedUserReward;\n  }\n\n  // Search methods\n  async searchContent(query: string, category?: string, limit: number = 20): Promise<any[]> {\n    const results: any[] = [];\n    const lowerQuery = query.toLowerCase();\n    \n    // Search movies\n    const movies = Array.from(this.movies.values())\n      .filter(movie => \n        (!category || movie.category === category) &&\n        (movie.title.toLowerCase().includes(lowerQuery) || \n         (movie.description ?? \"\").toLowerCase().includes(lowerQuery) ||\n         (movie.genre ?? \"\").toLowerCase().includes(lowerQuery))\n      )\n      .map(movie => ({ ...movie, type: 'movie' }));\n    results.push(...movies);\n    \n    // Search videos\n    const videos = Array.from(this.videos.values())\n      .filter(video => \n        (!category || video.category === category) &&\n        (video.title.toLowerCase().includes(lowerQuery) || \n         (video.description ?? \"\").toLowerCase().includes(lowerQuery))\n      )\n      .map(video => ({ ...video, type: 'video' }));\n    results.push(...videos);\n    \n    // Search songs\n    const songs = Array.from(this.songs.values())\n      .filter(song => \n        (!category || song.category === category) &&\n        (song.title.toLowerCase().includes(lowerQuery) || \n         (song.description ?? \"\").toLowerCase().includes(lowerQuery))\n      )\n      .map(song => ({ ...song, type: 'song' }));\n    results.push(...songs);\n    \n    return results.slice(0, limit);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":22666},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, jsonb, timestamp, real, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\"),\n  level: integer(\"level\").notNull().default(1),\n  xp: integer(\"xp\").notNull().default(0),\n  coins: integer(\"coins\").notNull().default(0),\n  streakDays: integer(\"streak_days\").notNull().default(0),\n  lastActivity: timestamp(\"last_activity\").defaultNow(),\n  achievements: jsonb(\"achievements\").$type<string[]>().default(sql`'[]'::jsonb`).notNull(),\n  avatar: text(\"avatar\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userProgress = pgTable(\"user_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  subject: text(\"subject\").notNull(),\n  level: integer(\"level\").notNull().default(1),\n  progress: integer(\"progress\").notNull().default(0),\n  lastActivity: timestamp(\"last_activity\").defaultNow(),\n});\n\nexport const moodEntries = pgTable(\"mood_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  mood: text(\"mood\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const gameScores = pgTable(\"game_scores\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  gameId: text(\"game_id\").notNull(),\n  score: integer(\"score\").notNull(),\n  xpEarned: integer(\"xp_earned\").notNull(),\n  completedAt: timestamp(\"completed_at\").defaultNow(),\n});\n\nexport const movies = pgTable(\"movies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  genre: text(\"genre\"),\n  year: integer(\"year\"),\n  rating: real(\"rating\"),\n  posterUrl: text(\"poster_url\"),\n  backdropUrl: text(\"backdrop_url\"),\n  cast: jsonb(\"cast\").$type<string[]>().default(sql`'[]'::jsonb`).notNull(),\n  director: text(\"director\"),\n  duration: text(\"duration\"),\n  category: text(\"category\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const videos = pgTable(\"videos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  category: text(\"category\").notNull(),\n  duration: text(\"duration\"),\n  posterUrl: text(\"poster_url\"),\n  videoUrl: text(\"video_url\"),\n  userId: varchar(\"user_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const songs = pgTable(\"songs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  category: text(\"category\").notNull().default(\"Audio\"),\n  duration: text(\"duration\"),\n  posterUrl: text(\"poster_url\"),\n  audioUrl: text(\"audio_url\"),\n  userId: varchar(\"user_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const coinTransactions = pgTable(\"coin_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  amount: integer(\"amount\").notNull(),\n  transactionType: text(\"transaction_type\").notNull(), // \"earn\", \"spend\", \"bonus\"\n  source: text(\"source\").notNull(), // \"video\", \"song\", \"recreation\", \"daily\", \"achievement\"\n  sourceId: text(\"source_id\"),\n  description: text(\"description\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const rewards = pgTable(\"rewards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  cost: integer(\"cost\").notNull(),\n  category: text(\"category\").notNull(), // \"premium_content\", \"customization\", \"physical\", \"digital\"\n  type: text(\"type\").notNull(), // \"video\", \"theme\", \"badge\", \"product\"\n  data: jsonb(\"data\").$type<Record<string, any>>().default(sql`'{}'::jsonb`).notNull(),\n  isAvailable: boolean(\"is_available\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userRewards = pgTable(\"user_rewards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  rewardId: varchar(\"reward_id\").notNull().references(() => rewards.id),\n  redeemedAt: timestamp(\"redeemed_at\").defaultNow(),\n  isUsed: boolean(\"is_used\").default(false),\n  usedAt: timestamp(\"used_at\"),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  lastActivity: true,\n});\n\nexport const insertUserProgressSchema = createInsertSchema(userProgress).omit({\n  id: true,\n  lastActivity: true,\n});\n\nexport const insertMoodEntrySchema = createInsertSchema(moodEntries).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertGameScoreSchema = createInsertSchema(gameScores).omit({\n  id: true,\n  completedAt: true,\n});\n\nexport const insertMovieSchema = createInsertSchema(movies).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertVideoSchema = createInsertSchema(videos).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSongSchema = createInsertSchema(songs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCoinTransactionSchema = createInsertSchema(coinTransactions).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertRewardSchema = createInsertSchema(rewards).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserRewardSchema = createInsertSchema(userRewards).omit({\n  id: true,\n  redeemedAt: true,\n});\n\n// Update schemas for proper validation\nexport const updateMovieSchema = insertMovieSchema.partial().omit({\n  createdAt: true,\n});\n\nexport const updateVideoSchema = insertVideoSchema.partial().omit({\n  createdAt: true,\n  userId: true,\n});\n\nexport const updateSongSchema = insertSongSchema.partial().omit({\n  createdAt: true,\n  userId: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertUserProgress = z.infer<typeof insertUserProgressSchema>;\nexport type UserProgress = typeof userProgress.$inferSelect;\nexport type InsertMoodEntry = z.infer<typeof insertMoodEntrySchema>;\nexport type MoodEntry = typeof moodEntries.$inferSelect;\nexport type InsertGameScore = z.infer<typeof insertGameScoreSchema>;\nexport type GameScore = typeof gameScores.$inferSelect;\nexport type InsertMovie = z.infer<typeof insertMovieSchema>;\nexport type Movie = typeof movies.$inferSelect;\nexport type InsertVideo = z.infer<typeof insertVideoSchema>;\nexport type Video = typeof videos.$inferSelect;\nexport type InsertSong = z.infer<typeof insertSongSchema>;\nexport type Song = typeof songs.$inferSelect;\nexport type InsertCoinTransaction = z.infer<typeof insertCoinTransactionSchema>;\nexport type CoinTransaction = typeof coinTransactions.$inferSelect;\nexport type InsertReward = z.infer<typeof insertRewardSchema>;\nexport type Reward = typeof rewards.$inferSelect;\nexport type InsertUserReward = z.infer<typeof insertUserRewardSchema>;\nexport type UserReward = typeof userRewards.$inferSelect;\n","size_bytes":7448},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Recreation from \"@/pages/Recreation\";\nimport Games from \"@/pages/Games\";\nimport Sidebar from \"@/components/Sidebar\";\nimport FloatingChat from \"@/components/FloatingChat\";\n\nfunction Router() {\n  return (\n    <div className=\"flex h-screen relative z-10\">\n      <Sidebar />\n      <div className=\"flex-1 p-4 pl-2 overflow-y-auto\">\n        <Switch>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/recreation\" component={Recreation} />\n          <Route path=\"/games\" component={Games} />\n          <Route path=\"/goals\" component={() => <div className=\"text-white text-2xl\">Mind Goals - Coming Soon</div>} />\n          <Route path=\"/knowledge\" component={() => <div className=\"text-white text-2xl\">Knowledge Bank - Coming Soon</div>} />\n          <Route path=\"/discovery\" component={() => <div className=\"text-white text-2xl\">Discovery - Coming Soon</div>} />\n          <Route component={() => <div className=\"text-white text-2xl\">Page Not Found</div>} />\n        </Switch>\n      </div>\n      <FloatingChat />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1577},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(220 30% 95%);\n  --foreground: hsl(220 15% 15%);\n  --card: hsla(0 0% 100% / 0.15);\n  --card-foreground: hsl(220 15% 15%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(220 15% 15%);\n  --primary: hsl(220 70% 50%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(160 70% 50%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsla(0 0% 100% / 0.1);\n  --muted-foreground: hsl(220 15% 40%);\n  --accent: hsl(180 70% 60%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsla(0 0% 100% / 0.3);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(220 70% 50%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1rem;\n  --glass-bg: hsla(0 0% 100% / 0.15);\n  --glass-border: hsla(0 0% 100% / 0.3);\n  --orbital-ring: hsla(0 0% 100% / 0.3);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsla(0 0% 100% / 0.1);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(220 70% 50%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(160 70% 50%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsla(0 0% 100% / 0.1);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(180 70% 60%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsla(0 0% 100% / 0.2);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(220 70% 50%);\n  --glass-bg: hsla(0 0% 100% / 0.1);\n  --glass-border: hsla(0 0% 100% / 0.2);\n  --orbital-ring: hsla(0 0% 100% / 0.2);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased text-foreground;\n    background: linear-gradient(135deg, hsl(220 70% 60%) 0%, hsl(180 70% 60%) 50%, hsl(160 70% 60%) 100%);\n    min-height: 100vh;\n    position: relative;\n    overflow-x: hidden;\n  }\n\n  body::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-image: \n      radial-gradient(circle at 20% 20%, hsla(0 0% 100% / 0.1) 2px, transparent 2px),\n      radial-gradient(circle at 60% 40%, hsla(0 0% 100% / 0.05) 1px, transparent 1px),\n      radial-gradient(circle at 80% 70%, hsla(0 0% 100% / 0.08) 1.5px, transparent 1.5px);\n    background-size: 100px 100px, 60px 60px, 80px 80px;\n    pointer-events: none;\n    z-index: 0;\n  }\n}\n\n@layer components {\n  .glass-card {\n    background: var(--glass-bg);\n    backdrop-filter: blur(20px);\n    border: 1px solid var(--glass-border);\n    box-shadow: 0 8px 32px hsla(0 0% 0% / 0.1);\n  }\n\n  .nav-item {\n    transition: all 0.3s ease;\n  }\n\n  .nav-item:hover {\n    background: hsla(0 0% 100% / 0.2);\n    transform: translateX(5px);\n  }\n\n  .orbital-ring {\n    border: 2px dashed var(--orbital-ring);\n    border-radius: 50%;\n    position: absolute;\n    animation: rotate 30s linear infinite;\n  }\n\n  .orbital-element {\n    position: absolute;\n    animation: counter-rotate 30s linear infinite;\n  }\n\n  .robot-float {\n    animation: float 3s ease-in-out infinite;\n  }\n\n  .mood-emoji {\n    transition: all 0.3s ease;\n    cursor: pointer;\n  }\n\n  .mood-emoji:hover {\n    transform: scale(1.2);\n  }\n\n  .game-card {\n    transition: all 0.3s ease;\n  }\n\n  .game-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 12px 40px hsla(0 0% 0% / 0.15);\n  }\n}\n\n@keyframes rotate {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n@keyframes counter-rotate {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(-360deg); }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n","size_bytes":4656},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/FloatingChat.tsx":{"content":"import { useState } from \"react\";\nimport { X, MessageCircle } from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport RobotCharacter from \"./RobotCharacter\";\n\nexport default function FloatingChat() {\n  const [isOpen, setIsOpen] = useState(true);\n  const [isMinimized, setIsMinimized] = useState(false);\n\n  const toggleChat = () => {\n    if (isMinimized) {\n      setIsMinimized(false);\n    } else {\n      setIsOpen(!isOpen);\n    }\n  };\n\n  const minimizeChat = () => {\n    setIsOpen(false);\n    setIsMinimized(false);\n  };\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50\" data-testid=\"floating-chat\">\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            initial={{ opacity: 0, scale: 0.8, y: 20 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.8, y: 20 }}\n            className={cn(\n              \"glass-card rounded-2xl max-w-sm transition-all duration-300\",\n              isMinimized ? \"p-2\" : \"p-4\"\n            )}\n            data-testid=\"chat-widget\"\n          >\n            {!isMinimized ? (\n              <>\n                <div className=\"flex items-center space-x-3 mb-3\">\n                  <div className=\"w-10 h-10\">\n                    <RobotCharacter size=\"sm\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"text-white font-medium text-sm\">EduBot</div>\n                    <div className=\"text-white/70 text-xs\">Your Learning Assistant</div>\n                  </div>\n                  <button\n                    onClick={minimizeChat}\n                    className=\"text-white/70 hover:text-white transition-colors\"\n                    data-testid=\"minimize-chat\"\n                  >\n                    <MessageCircle className=\"w-4 h-4\" />\n                  </button>\n                  <button\n                    onClick={toggleChat}\n                    className=\"text-white/70 hover:text-white transition-colors\"\n                    data-testid=\"close-chat\"\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </button>\n                </div>\n                <div className=\"bg-white/10 rounded-lg p-3 mb-3\">\n                  <p className=\"text-white/90 text-sm\">\n                    Welcome, AstroBeth! Ready to boost your learning orbit today?\n                  </p>\n                </div>\n                <button\n                  className=\"w-full bg-gradient-to-r from-primary to-accent text-white py-2 rounded-lg text-sm font-medium hover:shadow-lg transition-all\"\n                  data-testid=\"chat-button\"\n                >\n                  Chat with EduBot\n                </button>\n              </>\n            ) : (\n              <button\n                onClick={toggleChat}\n                className=\"w-12 h-12 bg-gradient-to-r from-primary to-accent rounded-full flex items-center justify-center\"\n                data-testid=\"expand-chat\"\n              >\n                <MessageCircle className=\"text-white w-6 h-6\" />\n              </button>\n            )}\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {!isOpen && (\n        <motion.button\n          initial={{ opacity: 0, scale: 0.8 }}\n          animate={{ opacity: 1, scale: 1 }}\n          onClick={toggleChat}\n          className=\"w-14 h-14 bg-gradient-to-r from-primary to-accent rounded-full flex items-center justify-center shadow-lg hover:shadow-xl transition-all\"\n          data-testid=\"open-chat\"\n        >\n          <MessageCircle className=\"text-white w-6 h-6\" />\n        </motion.button>\n      )}\n    </div>\n  );\n}\n\nfunction cn(...classes: (string | undefined)[]) {\n  return classes.filter(Boolean).join(' ');\n}\n","size_bytes":3743},"client/src/components/OrbitalInterface.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { StickyNote, Music, Gamepad2, Settings } from \"lucide-react\";\nimport RobotCharacter from \"./RobotCharacter\";\n\nexport default function OrbitalInterface() {\n  const orbitalElements = [\n    { icon: StickyNote, position: \"top-4 left-1/2 transform -translate-x-1/2\", color: \"text-primary\" },\n    { icon: Music, position: \"top-1/2 right-4 transform -translate-y-1/2\", color: \"text-secondary\" },\n    { icon: Gamepad2, position: \"bottom-4 left-1/2 transform -translate-x-1/2\", color: \"text-accent\" },\n    { icon: Settings, position: \"top-1/2 left-4 transform -translate-y-1/2\", color: \"text-muted-foreground\" },\n  ];\n\n  return (\n    <div className=\"glass-card rounded-3xl h-96 relative overflow-hidden flex items-center justify-center\" data-testid=\"orbital-interface\">\n      {/* Orbital Rings */}\n      <motion.div \n        className=\"orbital-ring w-80 h-80\"\n        animate={{ rotate: 360 }}\n        transition={{ duration: 30, repeat: Infinity, ease: \"linear\" }}\n        data-testid=\"orbital-ring\"\n      >\n        {/* Orbital Elements */}\n        {orbitalElements.map((element, index) => {\n          const Icon = element.icon;\n          return (\n            <motion.div\n              key={index}\n              className={`orbital-element ${element.position}`}\n              animate={{ rotate: -360 }}\n              transition={{ duration: 30, repeat: Infinity, ease: \"linear\" }}\n              data-testid={`orbital-element-${index}`}\n            >\n              <div className=\"glass-card p-3 rounded-xl\">\n                <div className=\"w-12 h-12 bg-white rounded-lg flex items-center justify-center\">\n                  <Icon className={`${element.color} text-lg`} />\n                </div>\n              </div>\n            </motion.div>\n          );\n        })}\n      </motion.div>\n\n      {/* Central Robot Character */}\n      <div className=\"absolute inset-0 flex items-center justify-center\" data-testid=\"central-robot\">\n        <RobotCharacter size=\"lg\" />\n      </div>\n    </div>\n  );\n}\n","size_bytes":2035},"client/src/components/RobotCharacter.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\ninterface RobotCharacterProps {\n  size?: \"sm\" | \"md\" | \"lg\";\n  animate?: boolean;\n}\n\nexport default function RobotCharacter({ size = \"lg\", animate = true }: RobotCharacterProps) {\n  const sizeClasses = {\n    sm: \"w-10 h-10\",\n    md: \"w-20 h-20\", \n    lg: \"w-32 h-32\"\n  };\n\n  const faceSizes = {\n    sm: \"w-6 h-6\",\n    md: \"w-12 h-12\",\n    lg: \"w-16 h-16\"\n  };\n\n  const eyeSizes = {\n    sm: \"w-1 h-1\",\n    md: \"w-2 h-2\", \n    lg: \"w-3 h-3\"\n  };\n\n  const armSizes = {\n    sm: \"w-2 h-4\",\n    md: \"w-3 h-6\",\n    lg: \"w-4 h-8\"\n  };\n\n  const robotContainer = (\n    <div className={cn(\n      \"bg-gradient-to-br from-accent/20 to-secondary/20 rounded-full flex items-center justify-center relative\",\n      sizeClasses[size],\n      animate && \"robot-float\"\n    )}>\n      <div className={cn(\n        \"bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center relative\",\n        size === \"sm\" ? \"w-8 h-8\" : size === \"md\" ? \"w-16 h-16\" : \"w-24 h-24\"\n      )}>\n        {/* Robot Face */}\n        <div className={cn(\n          \"bg-white rounded-full flex items-center justify-center relative\",\n          faceSizes[size]\n        )}>\n          {/* Eyes */}\n          <div className=\"flex space-x-1\">\n            <div className={cn(\"bg-primary rounded-full\", eyeSizes[size])} />\n            <div className={cn(\"bg-primary rounded-full\", eyeSizes[size])} />\n          </div>\n          {/* Smile */}\n          <div className={cn(\n            \"absolute border-b-2 border-primary rounded-full\",\n            size === \"sm\" ? \"bottom-0.5 left-1/2 transform -translate-x-1/2 w-2 h-1\" :\n            size === \"md\" ? \"bottom-1 left-1/2 transform -translate-x-1/2 w-4 h-2\" :\n            \"bottom-2 left-1/2 transform -translate-x-1/2 w-6 h-3\"\n          )} />\n        </div>\n        \n        {/* Robot Arms */}\n        <div className={cn(\n          \"absolute top-1/2 transform -translate-y-1/2 bg-gradient-to-br from-primary to-accent rounded-full\",\n          armSizes[size],\n          size === \"sm\" ? \"-left-3\" : size === \"md\" ? \"-left-4\" : \"-left-6\"\n        )} />\n        <div className={cn(\n          \"absolute top-1/2 transform -translate-y-1/2 bg-gradient-to-br from-primary to-accent rounded-full\",\n          armSizes[size],\n          size === \"sm\" ? \"-right-3\" : size === \"md\" ? \"-right-4\" : \"-right-6\"\n        )} />\n      </div>\n    </div>\n  );\n\n  return animate ? (\n    <motion.div\n      animate={{\n        y: [0, -10, 0],\n      }}\n      transition={{\n        duration: 3,\n        repeat: Infinity,\n        ease: \"easeInOut\",\n      }}\n    >\n      {robotContainer}\n    </motion.div>\n  ) : robotContainer;\n}\n","size_bytes":2688},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Home, Target, Book, Activity, Gamepad2, Compass, GraduationCap, User } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  \n  const { data: user } = useQuery({\n    queryKey: ['/api/user'],\n  });\n\n  const navItems = [\n    { path: \"/\", icon: Home, label: \"Mind Home\" },\n    { path: \"/goals\", icon: Target, label: \"Mind Goals\" },\n    { path: \"/knowledge\", icon: Book, label: \"Knowledge Bank\" },\n    { path: \"/recreation\", icon: Activity, label: \"Recreation\" },\n    { path: \"/games\", icon: Gamepad2, label: \"PlayZone\" },\n    { path: \"/discovery\", icon: Compass, label: \"Discovery\" },\n  ];\n\n  return (\n    <div className=\"w-64 glass-card m-4 mr-2 rounded-2xl p-6 flex flex-col\" data-testid=\"sidebar\">\n      {/* Logo */}\n      <div className=\"flex items-center space-x-3 mb-8\" data-testid=\"logo\">\n        <div className=\"w-10 h-10 bg-gradient-to-r from-primary to-secondary rounded-lg flex items-center justify-center\">\n          <GraduationCap className=\"text-white text-lg\" />\n        </div>\n        <span className=\"text-white font-bold text-xl\">EduMind</span>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 space-y-2\" data-testid=\"nav-menu\">\n        {navItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.path;\n          \n          return (\n            <Link key={item.path} href={item.path}>\n              <div\n                className={cn(\n                  \"nav-item flex items-center space-x-3 px-4 py-3 rounded-xl text-white/90 hover:text-white cursor-pointer\",\n                  isActive && \"bg-white/20\"\n                )}\n                data-testid={`nav-item-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <Icon className=\"w-5 h-5\" />\n                <span>{item.label}</span>\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* User Profile */}\n      <div className=\"mt-auto\" data-testid=\"user-profile\">\n        <div className=\"flex items-center space-x-3 px-4 py-3 glass-card rounded-xl\">\n          <div className=\"w-10 h-10 bg-gradient-to-r from-accent to-secondary rounded-full flex items-center justify-center\">\n            <User className=\"text-white\" />\n          </div>\n          <div>\n            <div className=\"text-white font-medium text-sm\" data-testid=\"user-name\">\n              {user?.username || \"AstroBeth\"}\n            </div>\n            <div className=\"text-white/70 text-xs\" data-testid=\"user-level\">\n              Level {user?.level || 7} Explorer\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2791},"client/src/components/WellnessCompass.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst moodEmojis = [\n  { emoji: \"😊\", mood: \"happy\", label: \"Happy\" },\n  { emoji: \"😌\", mood: \"calm\", label: \"Calm\" },\n  { emoji: \"🤔\", mood: \"thoughtful\", label: \"Thoughtful\" },\n  { emoji: \"⭐\", mood: \"energetic\", label: \"Energetic\" },\n  { emoji: \"😅\", mood: \"restless\", label: \"Restless\" },\n];\n\nexport default function WellnessCompass() {\n  const [selectedMood, setSelectedMood] = useState<string | null>(null);\n  const queryClient = useQueryClient();\n\n  const { data: moodEntries } = useQuery({\n    queryKey: ['/api/user/mood'],\n  });\n\n  const moodMutation = useMutation({\n    mutationFn: async (mood: string) => {\n      return apiRequest('POST', '/api/user/mood', { mood });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user/mood'] });\n    },\n  });\n\n  const handleMoodSelect = (mood: string) => {\n    setSelectedMood(mood);\n    moodMutation.mutate(mood);\n  };\n\n  // Calculate mood distribution\n  const moodCounts = (moodEntries as any[])?.reduce((acc: Record<string, number>, entry: any) => {\n    acc[entry.mood] = (acc[entry.mood] || 0) + 1;\n    return acc;\n  }, {}) || {};\n\n  const totalEntries = (moodEntries as any[])?.length || 0;\n  const dominantMood = totalEntries > 0 \n    ? Object.entries(moodCounts).reduce((a, b) => moodCounts[a[0]] > moodCounts[b[0]] ? a : b)[0]\n    : \"calm\";\n  \n  const dominantPercentage = totalEntries > 0 \n    ? Math.round((moodCounts[dominantMood] / totalEntries) * 100) \n    : 76;\n\n  return (\n    <div className=\"glass-card rounded-3xl p-6\" data-testid=\"wellness-compass\">\n      <h3 className=\"text-white font-semibold mb-4\">Your Wellness Compass</h3>\n      \n      <div className=\"flex justify-between mb-4\" data-testid=\"mood-emojis\">\n        {moodEmojis.map((item) => (\n          <motion.div\n            key={item.mood}\n            className=\"mood-emoji text-2xl cursor-pointer\"\n            title={item.label}\n            whileHover={{ scale: 1.2 }}\n            whileTap={{ scale: 1.1 }}\n            onClick={() => handleMoodSelect(item.mood)}\n            animate={{\n              scale: selectedMood === item.mood ? 1.3 : 1,\n              opacity: selectedMood === item.mood ? 1 : 0.7,\n            }}\n            data-testid={`mood-emoji-${item.mood}`}\n          >\n            {item.emoji}\n          </motion.div>\n        ))}\n      </div>\n      \n      <div className=\"text-white/70 text-sm mb-2\">\n        Mostly {dominantMood} mood\n      </div>\n      <div className=\"text-white font-medium mb-3\" data-testid=\"mood-percentage\">\n        {dominantPercentage}% is {dominantMood.charAt(0).toUpperCase() + dominantMood.slice(1)}\n      </div>\n      \n      <div className=\"flex space-x-1 h-2\" data-testid=\"mood-chart\">\n        {moodEmojis.map((item, index) => {\n          const percentage = totalEntries > 0 ? (moodCounts[item.mood] || 0) / totalEntries : 0.2;\n          const colors = [\n            \"bg-green-400\", \"bg-green-300\", \"bg-blue-300\", \n            \"bg-blue-400\", \"bg-purple-300\", \"bg-purple-400\"\n          ];\n          \n          return (\n            <motion.div\n              key={item.mood}\n              className={`flex-1 rounded ${colors[index % colors.length]}`}\n              initial={{ scaleY: 0 }}\n              animate={{ scaleY: percentage }}\n              transition={{ delay: index * 0.1 }}\n              data-testid={`mood-bar-${item.mood}`}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3623},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Dashboard.tsx":{"content":"import { Search } from \"lucide-react\";\nimport OrbitalInterface from \"@/components/OrbitalInterface\";\nimport WellnessCompass from \"@/components/WellnessCompass\";\n\nexport default function Dashboard() {\n  return (\n    <>\n      {/* Header */}\n      <div className=\"flex justify-between items-center mb-6\" data-testid=\"dashboard-header\">\n        <h1 className=\"text-white text-3xl font-bold\">Daily Orbit</h1>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"glass-card px-4 py-2 rounded-full\">\n            <span className=\"text-white/90 text-sm\">Rewrite Items</span>\n          </div>\n          <div className=\"w-10 h-10 glass-card rounded-full flex items-center justify-center\">\n            <Search className=\"text-white/90 w-4 h-4\" />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-12 gap-6 h-full\">\n        {/* Central Orbital Interface */}\n        <div className=\"col-span-8\">\n          <OrbitalInterface />\n        </div>\n\n        {/* Right Sidebar Widgets */}\n        <div className=\"col-span-4 space-y-6\">\n          {/* Wellness Compass */}\n          <WellnessCompass />\n\n          {/* New Starfaring Lecture */}\n          <div className=\"glass-card rounded-3xl p-6\" data-testid=\"starfaring-lecture\">\n            <h3 className=\"text-white font-semibold mb-4\">New Starfaring Lecture</h3>\n            <div className=\"flex space-x-4\">\n              <img\n                src=\"https://images.unsplash.com/photo-1502134249126-9f3755a50d78?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=100&h=100\"\n                alt=\"Spiral galaxy with vibrant cosmic colors\"\n                className=\"w-16 h-16 rounded-xl object-cover\"\n                data-testid=\"galaxy-image\"\n              />\n              <div>\n                <h4 className=\"text-white font-medium text-sm\">Astrophysics 100:</h4>\n                <p className=\"text-white/70 text-sm\">Galactic Evolution - Module 3</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Peer Constellation Forum */}\n          <div className=\"glass-card rounded-3xl p-6\" data-testid=\"constellation-forum\">\n            <h3 className=\"text-white font-semibold mb-4\">Peer Constellation Forum</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center\">\n                  <div className=\"w-4 h-4 bg-white rounded-full\" />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-white/90 text-sm\">Thread: \"Coping with exam star-charts\"</p>\n                  <p className=\"text-white/60 text-xs\">5 new replies</p>\n                </div>\n                <div className=\"w-6 h-6 bg-gradient-to-r from-accent to-secondary rounded-full flex items-center justify-center\">\n                  <div className=\"w-3 h-3 bg-white rounded-full\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":3134},"client/src/pages/Games.tsx":{"content":"import { Brain, Puzzle, Clock, Lightbulb, Star } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nconst featuredGames = [\n  {\n    title: \"Math Galaxy Quest\",\n    description: \"Solve mathematical equations while exploring distant galaxies and discovering new star systems.\",\n    image: \"https://images.unsplash.com/photo-1519904981063-b0cf448d479e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=200\",\n    rating: 4.9,\n    xp: 50,\n    gradient: \"from-primary to-secondary\",\n    badge: \"New\",\n    badgeColor: \"from-yellow-400 to-orange-400\"\n  },\n  {\n    title: \"Language Constellation\",\n    description: \"Connect words and build vocabulary while mapping linguistic star patterns across cultures.\",\n    image: \"https://images.unsplash.com/photo-1481627834876-b7833e8f5570?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=200\",\n    rating: 4.7,\n    xp: 40,\n    gradient: \"from-green-500 to-emerald-500\",\n    badge: \"Popular\",\n    badgeColor: \"from-green-400 to-emerald-400\"\n  },\n  {\n    title: \"Science Lab Simulator\",\n    description: \"Conduct virtual experiments and discover scientific principles in a safe digital laboratory.\",\n    image: \"https://images.unsplash.com/photo-1532094349884-543bc11b234d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=200\",\n    rating: 4.8,\n    xp: 60,\n    gradient: \"from-purple-500 to-pink-500\",\n    badge: \"Updated\",\n    badgeColor: \"from-purple-400 to-pink-400\"\n  }\n];\n\nconst dailyChallenges = [\n  {\n    icon: Brain,\n    title: \"Memory Matrix\",\n    description: \"Remember the pattern\",\n    gradient: \"from-red-400 to-pink-400\",\n    action: \"Play\"\n  },\n  {\n    icon: Puzzle,\n    title: \"Logic Puzzle\", \n    description: \"Solve in 5 minutes\",\n    gradient: \"from-blue-400 to-cyan-400\",\n    action: \"Solve\"\n  },\n  {\n    icon: Clock,\n    title: \"Speed Quiz\",\n    description: \"20 questions\",\n    gradient: \"from-green-400 to-teal-400\", \n    action: \"Start\"\n  },\n  {\n    icon: Lightbulb,\n    title: \"Creative Mode\",\n    description: \"Build & learn\",\n    gradient: \"from-yellow-400 to-orange-400\",\n    action: \"Create\"\n  }\n];\n\nexport default function Games() {\n  const { data: user } = useQuery({\n    queryKey: ['/api/user'],\n  });\n\n  const { data: userProgress } = useQuery({\n    queryKey: ['/api/user/progress'],\n  });\n\n  const progressData = userProgress || [\n    { subject: \"Mathematics\", level: 8, progress: 75 },\n    { subject: \"Science\", level: 6, progress: 60 },\n    { subject: \"Languages\", level: 7, progress: 90 }\n  ];\n\n  return (\n    <>\n      {/* Header */}\n      <div className=\"flex justify-between items-center mb-6\" data-testid=\"games-header\">\n        <h1 className=\"text-white text-3xl font-bold\">PlayZone</h1>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"glass-card px-4 py-2 rounded-full\">\n            <span className=\"text-white/90 text-sm\">Level {user?.level || 7} Explorer</span>\n          </div>\n          <div className=\"glass-card px-4 py-2 rounded-full\">\n            <span className=\"text-white/90 text-sm\">⭐ {user?.xp || 2450} XP</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Featured Games */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-white text-xl font-semibold mb-4\">Featured Learning Games</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {featuredGames.map((game, index) => (\n            <motion.div\n              key={game.title}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: index * 0.1 }}\n              className=\"game-card glass-card rounded-3xl p-6\"\n              data-testid={`featured-game-${index}`}\n            >\n              <div className=\"relative mb-4\">\n                <img\n                  src={game.image}\n                  alt={game.title}\n                  className=\"w-full h-32 object-cover rounded-xl\"\n                />\n                <div className={`absolute top-2 right-2 bg-gradient-to-r ${game.badgeColor} text-white px-2 py-1 rounded-lg text-xs font-medium`}>\n                  {game.badge}\n                </div>\n              </div>\n              <h3 className=\"text-white font-semibold text-lg mb-2\">{game.title}</h3>\n              <p className=\"text-white/70 text-sm mb-4\">{game.description}</p>\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"flex text-yellow-400\">\n                    {[...Array(5)].map((_, i) => (\n                      <Star\n                        key={i}\n                        className={`w-4 h-4 ${i < Math.floor(game.rating) ? 'fill-current' : ''}`}\n                      />\n                    ))}\n                  </div>\n                  <span className=\"text-white/60 text-sm\">{game.rating}</span>\n                </div>\n                <span className=\"text-accent text-sm font-medium\">+{game.xp} XP</span>\n              </div>\n              <button \n                className={`w-full bg-gradient-to-r ${game.gradient} text-white py-3 rounded-xl font-medium hover:shadow-lg transition-all`}\n                data-testid={`play-${game.title.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                Launch Mission\n              </button>\n            </motion.div>\n          ))}\n        </div>\n      </div>\n\n      {/* Daily Challenges */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-white text-xl font-semibold mb-4\">Daily Challenges</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {dailyChallenges.map((challenge, index) => {\n            const Icon = challenge.icon;\n            return (\n              <motion.div\n                key={challenge.title}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.3 + index * 0.1 }}\n                className=\"glass-card rounded-2xl p-4 text-center\"\n                data-testid={`challenge-${index}`}\n              >\n                <div className={`w-12 h-12 bg-gradient-to-r ${challenge.gradient} rounded-full flex items-center justify-center mx-auto mb-3`}>\n                  <Icon className=\"text-white text-lg\" />\n                </div>\n                <h4 className=\"text-white font-medium mb-2\">{challenge.title}</h4>\n                <p className=\"text-white/60 text-xs mb-3\">{challenge.description}</p>\n                <button \n                  className={`bg-gradient-to-r ${challenge.gradient} text-white px-4 py-2 rounded-lg text-sm w-full`}\n                  data-testid={`challenge-${challenge.action.toLowerCase()}`}\n                >\n                  {challenge.action}\n                </button>\n              </motion.div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Learning Progress */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.7 }}\n        className=\"glass-card rounded-3xl p-8\"\n        data-testid=\"learning-progress\"\n      >\n        <h2 className=\"text-white text-xl font-semibold mb-6\">Learning Progress</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          {progressData.map((subject, index) => (\n            <div key={subject.subject} data-testid={`progress-${subject.subject.toLowerCase()}`}>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-white font-medium\">{subject.subject}</span>\n                <span className=\"text-accent font-medium\">Level {subject.level}</span>\n              </div>\n              <div className=\"w-full bg-white/10 rounded-full h-3 mb-4\">\n                <motion.div\n                  initial={{ width: 0 }}\n                  animate={{ width: `${subject.progress}%` }}\n                  transition={{ delay: 0.9 + index * 0.1, duration: 0.8 }}\n                  className=\"bg-gradient-to-r from-primary to-secondary h-3 rounded-full\"\n                />\n              </div>\n              <p className=\"text-white/60 text-sm\">{subject.progress}% to next level</p>\n            </div>\n          ))}\n        </div>\n      </motion.div>\n    </>\n  );\n}\n","size_bytes":8432},"client/src/pages/Recreation.tsx":{"content":"import { Palette, Leaf, Wind, Sun, Music, Heart } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\nconst activities = [\n  {\n    icon: Heart,\n    title: \"Mindful Meditation\",\n    description: \"Guided meditation sessions to help you find inner peace and focus.\",\n    sessions: \"15 Sessions Available\",\n    gradient: \"from-purple-500 to-pink-500\",\n    button: \"Start Session\"\n  },\n  {\n    icon: Wind,\n    title: \"Breathing Exercises\", \n    description: \"Interactive breathing patterns to reduce stress and improve focus.\",\n    sessions: \"4-7-8 Technique\",\n    gradient: \"from-cyan-500 to-blue-500\",\n    button: \"Breathe\"\n  },\n  {\n    icon: Leaf,\n    title: \"Nature Soundscapes\",\n    description: \"Calming nature sounds to help you relax and concentrate.\",\n    sessions: \"Rain, Ocean, Forest\",\n    gradient: \"from-green-500 to-emerald-500\", \n    button: \"Listen\"\n  },\n  {\n    icon: Sun,\n    title: \"Yoga & Stretching\",\n    description: \"Simple yoga poses and stretches to release tension and improve posture.\",\n    sessions: \"12 Routines\",\n    gradient: \"from-orange-500 to-red-500\",\n    button: \"Stretch\"\n  },\n  {\n    icon: Palette,\n    title: \"Creative Arts\",\n    description: \"Digital drawing, creative writing, and artistic expression tools.\",\n    sessions: \"Canvas & Journal\",\n    gradient: \"from-indigo-500 to-purple-500\",\n    button: \"Create\"\n  },\n  {\n    icon: Music,\n    title: \"Music Therapy\",\n    description: \"Therapeutic music sessions and interactive sound healing.\",\n    sessions: \"Binaural Beats\", \n    gradient: \"from-pink-500 to-rose-500\",\n    button: \"Play\"\n  }\n];\n\nconst wellnessStats = [\n  { value: 24, label: \"Minutes Meditated\", goal: \"Goal: 30 min\", gradient: \"from-green-400 to-blue-400\" },\n  { value: 8, label: \"Breathing Sessions\", goal: \"Goal: 10 sessions\", gradient: \"from-purple-400 to-pink-400\" },\n  { value: 15, label: \"Yoga Minutes\", goal: \"Goal: 20 min\", gradient: \"from-orange-400 to-red-400\" },\n  { value: 3, label: \"Art Creations\", goal: \"Goal: 5 pieces\", gradient: \"from-cyan-400 to-teal-400\" }\n];\n\nexport default function Recreation() {\n  return (\n    <>\n      {/* Header */}\n      <div className=\"flex justify-between items-center mb-6\" data-testid=\"recreation-header\">\n        <h1 className=\"text-white text-3xl font-bold\">Recreation Center</h1>\n        <div className=\"glass-card px-4 py-2 rounded-full\">\n          <span className=\"text-white/90 text-sm\">Wellness Zone</span>\n        </div>\n      </div>\n\n      {/* Activities Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6 mb-8\">\n        {activities.map((activity, index) => {\n          const Icon = activity.icon;\n          return (\n            <motion.div\n              key={activity.title}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: index * 0.1 }}\n              className=\"glass-card rounded-3xl p-6 hover:scale-105 transition-all duration-300\"\n              data-testid={`activity-${activity.title.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <div className={`w-12 h-12 bg-gradient-to-r ${activity.gradient} rounded-xl flex items-center justify-center mb-4`}>\n                <Icon className=\"text-white text-xl\" />\n              </div>\n              <h3 className=\"text-white font-semibold text-lg mb-2\">{activity.title}</h3>\n              <p className=\"text-white/70 text-sm mb-4\">{activity.description}</p>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-accent text-sm font-medium\">{activity.sessions}</span>\n                <button \n                  className={`bg-gradient-to-r ${activity.gradient} text-white px-4 py-2 rounded-xl text-sm hover:shadow-lg transition-all`}\n                  data-testid={`button-${activity.button.toLowerCase()}`}\n                >\n                  {activity.button}\n                </button>\n              </div>\n            </motion.div>\n          );\n        })}\n      </div>\n\n      {/* Wellness Dashboard */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.6 }}\n        className=\"glass-card rounded-3xl p-8\"\n        data-testid=\"wellness-dashboard\"\n      >\n        <h2 className=\"text-white text-xl font-semibold mb-6\">Today's Wellness Journey</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          {wellnessStats.map((stat, index) => (\n            <motion.div\n              key={stat.label}\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.8 + index * 0.1 }}\n              className=\"text-center\"\n              data-testid={`wellness-stat-${index}`}\n            >\n              <div className={`w-16 h-16 bg-gradient-to-r ${stat.gradient} rounded-full flex items-center justify-center mx-auto mb-3`}>\n                <span className=\"text-white font-bold text-xl\">{stat.value}</span>\n              </div>\n              <p className=\"text-white font-medium\">{stat.label}</p>\n              <p className=\"text-white/60 text-sm\">{stat.goal}</p>\n            </motion.div>\n          ))}\n        </div>\n      </motion.div>\n    </>\n  );\n}\n","size_bytes":5244},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}